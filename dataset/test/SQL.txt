1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what is the biggest city in wyoming<CODESPLIT>SELECT city_name FROM city WHERE population = ( SELECT MAX ( population ) FROM city WHERE state_name = "wyoming" ) AND state_name = "wyoming";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>which rivers run through the state with the largest city in the us<CODESPLIT>SELECT river_name FROM river WHERE traverse IN ( SELECT state_name FROM city WHERE population = ( SELECT MAX ( population ) FROM city ) );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>how big is new mexico<CODESPLIT>SELECT area FROM state WHERE state_name = "new mexico";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>how many people live in california<CODESPLIT>SELECT population FROM state WHERE state_name = "california";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what state has the smallest population<CODESPLIT>SELECT state_name FROM state WHERE population = ( SELECT MIN ( population ) FROM state );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>give me the cities in texas<CODESPLIT>SELECT city_name FROM city WHERE state_name = "texas";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what is the area of the state with the capital albany<CODESPLIT>SELECT area FROM state WHERE capital = "albany";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>give me the lakes in california<CODESPLIT>SELECT lake_name FROM lake WHERE state_name = "california";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>name the major lakes in michigan<CODESPLIT>SELECT lake_name FROM lake WHERE area > 750 AND state_name = "michigan";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what are the states<CODESPLIT>SELECT state_name FROM state;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>which states do ohio river flow through<CODESPLIT>SELECT traverse FROM river WHERE river_name = "ohio";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what state has the largest population<CODESPLIT>SELECT state_name FROM state WHERE population = ( SELECT MAX ( population ) FROM state );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what is the lowest elevation in pennsylvania<CODESPLIT>SELECT lowest_elevation FROM highlow WHERE state_name = "pennsylvania";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what is the highest point in each state whose lowest point is sea level<CODESPLIT>SELECT highest_point , state_name FROM highlow WHERE lowest_elevation = 0;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what is the length of the longest river in the usa<CODESPLIT>SELECT LENGTH FROM river WHERE LENGTH = ( SELECT MAX ( LENGTH ) FROM river );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what is the longest river flowing through texas<CODESPLIT>SELECT river_name FROM river WHERE LENGTH = ( SELECT MAX ( LENGTH ) FROM river WHERE traverse = "texas" ) AND traverse = "texas";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>how many rivers are in idaho<CODESPLIT>SELECT COUNT ( river_name ) FROM river WHERE traverse = "idaho";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what states neighbor kentucky<CODESPLIT>SELECT border FROM border_info WHERE state_name = "kentucky";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>name all the rivers in illinois<CODESPLIT>SELECT river_name FROM river WHERE traverse = "illinois";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what state is springfield in<CODESPLIT>SELECT state_name FROM city WHERE city_name = "springfield";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what is the population of the state with the largest area<CODESPLIT>SELECT population FROM state WHERE area = ( SELECT MAX ( area ) FROM state );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>how many people live in boulder<CODESPLIT>SELECT population FROM city WHERE city_name = "boulder";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what is the smallest city in alaska<CODESPLIT>SELECT city_name FROM city WHERE population = ( SELECT MIN ( population ) FROM city WHERE state_name = "alaska" ) AND state_name = "alaska";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>which states lie on the largest river in the united states<CODESPLIT>SELECT traverse FROM river WHERE LENGTH = ( SELECT MAX ( LENGTH ) FROM river );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what is the population density of the state with the smallest area<CODESPLIT>SELECT density FROM state WHERE area = ( SELECT MIN ( area ) FROM state );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>which states have points higher than the highest point in colorado<CODESPLIT>SELECT state_name FROM highlow WHERE highest_elevation > ( SELECT highest_elevation FROM highlow WHERE state_name = "colorado" );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what is the highest elevation in delaware<CODESPLIT>SELECT highest_elevation FROM highlow WHERE state_name = "delaware";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>give me the longest river that passes through the us<CODESPLIT>SELECT river_name FROM river WHERE LENGTH = ( SELECT MAX ( LENGTH ) FROM river );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what state has the city with the largest population<CODESPLIT>SELECT state_name FROM city WHERE population = ( SELECT MAX ( population ) FROM city );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what is the smallest city in the largest state<CODESPLIT>SELECT city_name FROM city WHERE population = ( SELECT MIN ( population ) FROM city WHERE state_name IN ( SELECT state_name FROM state WHERE area = ( SELECT MAX ( area ) FROM state ) ) ) AND state_name IN ( SELECT state_name FROM state WHERE area = ( SELECT MAX ( area ) FROM state ) );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what state is the biggest<CODESPLIT>SELECT state_name FROM state WHERE area = ( SELECT MAX ( area ) FROM state );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what are the highest points of states surrounding mississippi<CODESPLIT>SELECT highest_point FROM highlow WHERE state_name IN ( SELECT border FROM border_info WHERE state_name = "mississippi" );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what is the highest point in states bordering colorado<CODESPLIT>SELECT highest_point FROM highlow WHERE state_name IN ( SELECT border FROM border_info WHERE state_name = "colorado" ) ORDER BY highest_elevation DESC LIMIT 1;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what is the state with the lowest population density<CODESPLIT>SELECT state_name FROM state WHERE density = ( SELECT MIN ( density ) FROM state );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>where is the highest point in texas<CODESPLIT>SELECT highest_point FROM highlow WHERE state_name = "texas";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what states have no bordering state<CODESPLIT>SELECT state_name FROM state WHERE state_name NOT IN ( SELECT state_name FROM border_info );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what is the area of the state with the smallest population density<CODESPLIT>SELECT area FROM state WHERE density = ( SELECT MIN ( density ) FROM state );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>count the states which have elevations lower than what alabama has<CODESPLIT>SELECT COUNT ( state_name ) FROM highlow WHERE lowest_elevation < ( SELECT lowest_elevation FROM highlow WHERE state_name = "alabama" );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>how high is guadalupe peak<CODESPLIT>SELECT highest_elevation FROM highlow WHERE highest_point = "guadalupe peak";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>how high is the highest point in america<CODESPLIT>SELECT MAX ( highest_elevation ) FROM highlow;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>how long is the rio grande river<CODESPLIT>SELECT LENGTH FROM river WHERE river_name = "rio grande";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>how long is the longest river in texas<CODESPLIT>SELECT LENGTH FROM river WHERE LENGTH = ( SELECT MAX ( LENGTH ) FROM river WHERE traverse = "texas" ) AND traverse = "texas";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>how many capitals does rhode island have<CODESPLIT>SELECT COUNT ( capital ) FROM state WHERE state_name = "rhode island";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>how many cities are there in the united states<CODESPLIT>SELECT COUNT ( city_name ) FROM city;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>how many major cities are there<CODESPLIT>SELECT COUNT ( city_name ) FROM city WHERE population > 150000;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>how many citizens does the biggest city have in the usa<CODESPLIT>SELECT population FROM city WHERE population = ( SELECT MAX ( population ) FROM city );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>how many colorado rivers are there<CODESPLIT>SELECT COUNT ( river_name ) FROM river WHERE river_name = "colorado";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what is the population of seattle washington<CODESPLIT>SELECT population FROM city WHERE city_name = "seattle" AND state_name = "washington";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>how many people live in the biggest city in alaska state<CODESPLIT>SELECT population FROM city WHERE population = ( SELECT MAX ( population ) FROM city WHERE state_name = "alaska" ) AND state_name = "alaska";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>how many people live in the capital of texas<CODESPLIT>SELECT population FROM city WHERE city_name = ( SELECT capital FROM state WHERE state_name = "texas" );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>how many people live in the united states<CODESPLIT>SELECT SUM ( population ) FROM state;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>how many states are in the usa<CODESPLIT>SELECT COUNT ( state_name ) FROM state;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>how many states border kentucky<CODESPLIT>SELECT COUNT ( border ) FROM border_info WHERE state_name = "kentucky";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>how many states border the state with the largest population<CODESPLIT>SELECT COUNT ( border ) FROM border_info WHERE state_name IN ( SELECT state_name FROM state WHERE population = ( SELECT MAX ( population ) FROM state ) );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>how many states do not have rivers<CODESPLIT>SELECT COUNT ( DISTINCT state_name ) FROM state WHERE state_name NOT IN ( SELECT traverse FROM river );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>how many states have a higher point than the highest point of the state with the largest capital city in the us<CODESPLIT>SELECT COUNT ( state_name ) FROM highlow WHERE highest_elevation > ( SELECT highest_elevation FROM highlow WHERE state_name = ( SELECT state_name FROM state WHERE capital = ( SELECT city_name FROM city WHERE population = ( SELECT MAX ( population ) FROM city ) ) ) );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>name the major rivers in illinois<CODESPLIT>SELECT river_name FROM river WHERE LENGTH > 750 AND traverse = "illinois";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>through which states does the longest river in texas run<CODESPLIT>SELECT traverse FROM river WHERE LENGTH = ( SELECT MAX ( LENGTH ) FROM river WHERE traverse = "texas" );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what are the capital city in texas<CODESPLIT>SELECT capital FROM state WHERE state_name = "texas";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what are the capitals of states that border texas<CODESPLIT>SELECT t2.capital FROM state AS t2 JOIN border_info AS t1 ON t2.state_name = t1.border WHERE t1.state_name = "texas";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what are the cities in states through which the mississippi runs<CODESPLIT>SELECT city_name FROM city WHERE state_name IN ( SELECT traverse FROM river WHERE river_name = "mississippi" );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what are the cities of the state with the highest point<CODESPLIT>SELECT city_name FROM city WHERE state_name IN ( SELECT state_name FROM highlow WHERE highest_elevation = ( SELECT MAX ( highest_elevation ) FROM highlow ) );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what are the highest points of all the states<CODESPLIT>SELECT highest_point FROM highlow;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what are the major cities in kansas<CODESPLIT>SELECT city_name FROM city WHERE population > 150000 AND state_name = "kansas";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what are the major cities in states through which the mississippi runs<CODESPLIT>SELECT city_name FROM city WHERE population > 150000 AND state_name IN ( SELECT traverse FROM river WHERE LENGTH > 750 AND river_name = "mississippi" );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what are the major cities in the usa<CODESPLIT>SELECT city_name FROM city WHERE population > 150000;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what are the population densities of each us state<CODESPLIT>SELECT density FROM state;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what are the populations of states through which the mississippi river run<CODESPLIT>SELECT population FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name = "mississippi" );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what are the populations of states which border texas<CODESPLIT>SELECT t2.population FROM state AS t2 JOIN border_info AS t1 ON t2.state_name = t1.border WHERE t1.state_name = "texas";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what are the populations of the major cities of wisconsin<CODESPLIT>SELECT population FROM city WHERE population > 150000 AND state_name = "wisconsin";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what city has the most people<CODESPLIT>SELECT city_name FROM city WHERE population = ( SELECT MAX ( population ) FROM city );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what is the biggest capital city in the us<CODESPLIT>SELECT city_name FROM city WHERE population = ( SELECT MAX ( t1.population ) FROM state AS t2 JOIN city AS t1 ON t2.capital = t1.city_name );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what is the capital of states that have cities named durham<CODESPLIT>SELECT t2.capital FROM state AS t2 JOIN city AS t1 ON t2.state_name = t1.state_name WHERE t1.city_name = "durham";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what is the capital of the smallest state<CODESPLIT>SELECT capital FROM state WHERE area = ( SELECT MIN ( area ) FROM state );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what is the capital of the state with the largest population density<CODESPLIT>SELECT DISTINCT capital FROM state WHERE density = ( SELECT MAX ( density ) FROM state );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what is the capital of the state with the largest population<CODESPLIT>SELECT capital FROM state WHERE population = ( SELECT MAX ( population ) FROM state );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what is the capital of the state with the longest river<CODESPLIT>SELECT capital FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE LENGTH = ( SELECT MAX ( LENGTH ) FROM river ) );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what is the combined area of all 50 states<CODESPLIT>SELECT SUM ( area ) FROM state;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what is the density of the wyoming<CODESPLIT>SELECT density FROM state WHERE state_name = "wyoming";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what is the highest mountain in the us<CODESPLIT>SELECT mountain_name FROM mountain WHERE mountain_altitude = ( SELECT MAX ( mountain_altitude ) FROM mountain );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what is the highest point in the state with capital des moines<CODESPLIT>SELECT highest_point FROM highlow WHERE state_name IN ( SELECT state_name FROM state WHERE capital = "des moines" );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what is the highest point in the usa<CODESPLIT>SELECT highest_point FROM highlow WHERE highest_elevation = ( SELECT MAX ( highest_elevation ) FROM highlow );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what is the highest point of the state with the smallest population density<CODESPLIT>SELECT highest_point FROM highlow WHERE state_name IN ( SELECT state_name FROM state WHERE density = ( SELECT MIN ( density ) FROM state ) );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what is the largest city in smallest state through which the mississippi runs<CODESPLIT>SELECT city_name FROM city WHERE state_name IN ( SELECT state_name FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name = "mississippi" ) AND area = ( SELECT MIN ( area ) FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name = "mississippi" ) ) ) ORDER BY population DESC LIMIT 1;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what is the largest city in the smallest state in the usa<CODESPLIT>SELECT city_name FROM city WHERE population = ( SELECT MAX ( population ) FROM city WHERE state_name IN ( SELECT state_name FROM state WHERE area = ( SELECT MIN ( area ) FROM state ) ) ) AND state_name IN ( SELECT state_name FROM state WHERE area = ( SELECT MIN ( area ) FROM state ) );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what is the largest state bordering california<CODESPLIT>SELECT state_name FROM state WHERE area = ( SELECT MAX ( area ) FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name = "california" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name = "california" );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what is the longest river in the largest state<CODESPLIT>SELECT river_name FROM river WHERE LENGTH = ( SELECT MAX ( LENGTH ) FROM river WHERE traverse IN ( SELECT state_name FROM state WHERE area = ( SELECT MAX ( area ) FROM state ) ) ) AND traverse IN ( SELECT state_name FROM state WHERE area = ( SELECT MAX ( area ) FROM state ) );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what is the longest river in the states that border tennessee<CODESPLIT>SELECT river_name FROM river WHERE LENGTH = ( SELECT MAX ( LENGTH ) FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name = "tennessee" ) ) AND traverse IN ( SELECT border FROM border_info WHERE state_name = "tennessee" );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what is the longest river in the state with the most major cities<CODESPLIT>SELECT river_name FROM river WHERE traverse = ( SELECT state_name FROM city WHERE population > 150000 GROUP BY state_name ORDER BY COUNT ( city_name ) DESC LIMIT 1 ) ORDER BY LENGTH DESC LIMIT 1;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what is the lowest point in iowa<CODESPLIT>SELECT lowest_point FROM highlow WHERE state_name = "iowa";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what is the lowest point in usa<CODESPLIT>SELECT lowest_point FROM highlow WHERE lowest_elevation = ( SELECT MIN ( lowest_elevation ) FROM highlow );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what is the lowest point of all states through which the mississippi river runs through<CODESPLIT>SELECT lowest_point FROM highlow WHERE state_name IN ( SELECT traverse FROM river WHERE river_name = "mississippi" ) ORDER BY lowest_elevation LIMIT 1;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what is the most dense state in the usa<CODESPLIT>SELECT state_name FROM state WHERE density = ( SELECT MAX ( density ) FROM state );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what is the most populous state through which the mississippi runs<CODESPLIT>SELECT state_name FROM state WHERE population = ( SELECT MAX ( population ) FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name = "mississippi" ) ) AND state_name IN ( SELECT traverse FROM river WHERE river_name = "mississippi" );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what is the population density of the largest state<CODESPLIT>SELECT density FROM state WHERE area = ( SELECT MAX ( area ) FROM state );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what is the population of the largest city in the state with the largest area<CODESPLIT>SELECT population FROM city WHERE population = ( SELECT MAX ( population ) FROM city WHERE state_name IN ( SELECT state_name FROM state WHERE area = ( SELECT MAX ( area ) FROM state ) ) ) AND state_name IN ( SELECT state_name FROM state WHERE area = ( SELECT MAX ( area ) FROM state ) );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what is the population of the smallest state<CODESPLIT>SELECT population FROM state WHERE area = ( SELECT MIN ( area ) FROM state );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what is the population of the state with the highest population density<CODESPLIT>SELECT population FROM state WHERE density = ( SELECT MAX ( density ) FROM state );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what is the smallest city in the usa<CODESPLIT>SELECT city_name FROM city WHERE population = ( SELECT MIN ( population ) FROM city );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what is the smallest state bordering texas<CODESPLIT>SELECT state_name FROM state WHERE area = ( SELECT MIN ( area ) FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name = "texas" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name = "texas" );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what is the smallest state that the mississippi river runs through<CODESPLIT>SELECT state_name FROM state WHERE area = ( SELECT MIN ( area ) FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name = "mississippi" ) ) AND state_name IN ( SELECT traverse FROM river WHERE river_name = "mississippi" );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what is the state with the smallest area<CODESPLIT>SELECT state_name FROM state WHERE area = ( SELECT MIN ( area ) FROM state );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what is the total length of all rivers in the usa<CODESPLIT>SELECT SUM ( LENGTH ) FROM river;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what river flows through the most states<CODESPLIT>SELECT river_name FROM river GROUP BY ( river_name ) ORDER BY COUNT ( DISTINCT traverse ) DESC LIMIT 1;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what rivers are in states that border alabama<CODESPLIT>SELECT river_name FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name = "alabama" );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what state bordering oklahoma has the largest population<CODESPLIT>SELECT state_name FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name = "oklahoma" ) ORDER BY population DESC LIMIT 1;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what state contains the highest point of those the colorado river traverses<CODESPLIT>SELECT state_name FROM highlow WHERE highest_elevation = ( SELECT MAX ( highest_elevation ) FROM highlow WHERE state_name IN ( SELECT traverse FROM river WHERE river_name = "colorado" ) );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what state has the largest capital<CODESPLIT>SELECT state_name FROM city WHERE population = ( SELECT MAX ( t1.population ) FROM state AS t2 JOIN city AS t1 ON t2.capital = t1.city_name );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what state has the longest river<CODESPLIT>SELECT DISTINCT traverse FROM river WHERE LENGTH = ( SELECT MAX ( DISTINCT LENGTH ) FROM river );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what state has the smallest urban population<CODESPLIT>SELECT state_name FROM city GROUP BY state_name ORDER BY SUM ( population ) LIMIT 1;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what states border states that border colorado<CODESPLIT>SELECT border FROM border_info WHERE state_name IN ( SELECT border FROM border_info WHERE state_name = "colorado" );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what states border states that the mississippi runs through<CODESPLIT>SELECT border FROM border_info WHERE state_name IN ( SELECT traverse FROM river WHERE river_name = "mississippi" );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what states border texas and have a major river<CODESPLIT>SELECT state_name FROM border_info WHERE border = "texas" AND state_name IN ( SELECT traverse FROM river WHERE LENGTH > 750 );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what states border the most populous state<CODESPLIT>SELECT border FROM border_info WHERE state_name = ( SELECT state_name FROM state WHERE population = ( SELECT MAX ( population ) FROM state ) );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what states border the state with the smallest area<CODESPLIT>SELECT border FROM border_info WHERE state_name = ( SELECT state_name FROM state WHERE area = ( SELECT MIN ( area ) FROM state ) );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what states contain at least one major rivers<CODESPLIT>SELECT traverse FROM river WHERE LENGTH > 750;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>where are mountains<CODESPLIT>SELECT state_name FROM mountain;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>where is the highest mountain of the united states<CODESPLIT>SELECT state_name FROM mountain WHERE mountain_altitude = ( SELECT MAX ( mountain_altitude ) FROM mountain );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>where is the smallest city<CODESPLIT>SELECT state_name FROM city WHERE population = ( SELECT MIN ( population ) FROM city );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>which is the density of the state that the largest river in the united states runs through<CODESPLIT>SELECT density FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE LENGTH = ( SELECT MAX ( LENGTH ) FROM river ) );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>which is the highest peak not in alaska<CODESPLIT>SELECT mountain_name FROM mountain WHERE mountain_altitude = ( SELECT MAX ( mountain_altitude ) FROM mountain WHERE state_name != "alaska" );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>which rivers do not run through tennessee<CODESPLIT>SELECT river_name FROM river WHERE river_name NOT IN ( SELECT river_name FROM river WHERE traverse = "tennessee" );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>which rivers do not run through usa<CODESPLIT>SELECT river_name FROM river WHERE country_name != "usa";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>which rivers run through states that border the state with the capital atlanta<CODESPLIT>SELECT river_name FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name IN ( SELECT state_name FROM state WHERE capital = "atlanta" ) );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>which state capital has the smallest population<CODESPLIT>SELECT city_name FROM city WHERE population = ( SELECT MIN ( t1.population ) FROM state AS t2 JOIN city AS t1 ON t2.capital = t1.city_name );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>which state has the highest elevation<CODESPLIT>SELECT state_name FROM highlow WHERE highest_elevation = ( SELECT MAX ( highest_elevation ) FROM highlow );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>which state has the lowest elevation<CODESPLIT>SELECT state_name FROM highlow WHERE lowest_elevation = ( SELECT MIN ( lowest_elevation ) FROM highlow );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>which state has the lowest point that borders idaho<CODESPLIT>SELECT state_name FROM highlow WHERE lowest_elevation = ( SELECT MIN ( lowest_elevation ) FROM highlow WHERE state_name IN ( SELECT border FROM border_info WHERE state_name = "idaho" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name = "idaho" );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>which state has the smallest average urban population<CODESPLIT>SELECT state_name FROM city GROUP BY state_name ORDER BY AVG ( population ) LIMIT 1;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>which state is mount whitney in<CODESPLIT>SELECT state_name FROM mountain WHERE mountain_name = "whitney";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>which states have a river<CODESPLIT>SELECT traverse FROM river;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>which states have a major city named austin<CODESPLIT>SELECT state_name FROM city WHERE city_name = "austin" AND population > 150000;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what is the largest city in a state that borders california<CODESPLIT>SELECT city_name FROM city WHERE population = ( SELECT MAX ( population ) FROM city WHERE state_name IN ( SELECT border FROM border_info WHERE state_name = "california" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name = "california" );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>how many rivers do not traverse the state with the capital albany<CODESPLIT>SELECT COUNT ( river_name ) FROM river WHERE traverse NOT IN ( SELECT state_name FROM state WHERE capital = "albany" );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what is the shortest river in texas<CODESPLIT>SELECT river_name FROM river WHERE LENGTH = ( SELECT MIN ( LENGTH ) FROM river WHERE traverse = "texas" ) AND traverse = "texas";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what are the major cities in the smallest state in the us<CODESPLIT>SELECT city_name FROM city WHERE population > 150000 AND state_name = ( SELECT state_name FROM state WHERE area = ( SELECT MIN ( area ) FROM state ) );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what is the population of the capital of the largest state through which the mississippi runs<CODESPLIT>SELECT population FROM city WHERE city_name = ( SELECT capital FROM state WHERE area = ( SELECT MAX ( t1.area ) FROM state AS t1 JOIN river AS t2 ON t1.state_name = t2.traverse WHERE t2.river_name = "mississippi" ) );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what is the shortest river in the usa<CODESPLIT>SELECT river_name FROM river WHERE LENGTH = ( SELECT MIN ( LENGTH ) FROM river );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what is the capital of the state that borders the state that borders texas<CODESPLIT>SELECT capital FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name IN ( SELECT border FROM border_info WHERE state_name = "texas" ) );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what is the smallest city of the smallest state in the us<CODESPLIT>SELECT city_name FROM city WHERE population = ( SELECT MIN ( population ) FROM city WHERE state_name IN ( SELECT state_name FROM state WHERE area = ( SELECT MIN ( area ) FROM state ) ) ) AND state_name IN ( SELECT state_name FROM state WHERE area = ( SELECT MIN ( area ) FROM state ) );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what is the population of the largest state that borders texas<CODESPLIT>SELECT population FROM state WHERE area = ( SELECT MAX ( area ) FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name = "texas" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name = "texas" );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what state is salem the capital of<CODESPLIT>SELECT state_name FROM state WHERE capital = "salem";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what rivers flow through the state with the largest population<CODESPLIT>SELECT river_name FROM river WHERE traverse IN ( SELECT state_name FROM state WHERE population = ( SELECT MAX ( population ) FROM state ) );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what is the largest state that borders the state with the highest population<CODESPLIT>SELECT state_name FROM state WHERE area = ( SELECT MAX ( area ) FROM state WHERE state_name IN ( SELECT state_name FROM border_info WHERE border IN ( SELECT state_name FROM state WHERE population = ( SELECT MAX ( population ) FROM state ) ) ) ) AND state_name IN ( SELECT state_name FROM border_info WHERE border IN ( SELECT state_name FROM state WHERE population = ( SELECT MAX ( population ) FROM state ) ) );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>how many rivers are there in us<CODESPLIT>SELECT COUNT ( river_name ) FROM river;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>name the 50 capitals in the usa<CODESPLIT>SELECT DISTINCT capital FROM state;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>how many states have a city named springfield<CODESPLIT>SELECT COUNT ( state_name ) FROM city WHERE city_name = "springfield";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what state borders the state with the smallest population<CODESPLIT>SELECT border FROM border_info WHERE state_name IN ( SELECT state_name FROM state WHERE population = ( SELECT MIN ( population ) FROM state ) );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what are the lakes in states bordering texas<CODESPLIT>SELECT lake_name FROM lake WHERE state_name IN ( SELECT border FROM border_info WHERE state_name = "texas" );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>how many major cities are in texas<CODESPLIT>SELECT COUNT ( city_name ) FROM city WHERE population > 150000 AND state_name = "texas";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>how high are the highest points of all the states<CODESPLIT>SELECT highest_elevation FROM highlow;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>how many states does the missouri run through<CODESPLIT>SELECT COUNT ( traverse ) FROM river WHERE river_name = "missouri";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what is the longest river in the smallest state in the usa<CODESPLIT>SELECT river_name FROM river WHERE LENGTH = ( SELECT MAX ( LENGTH ) FROM river WHERE traverse IN ( SELECT state_name FROM state WHERE area = ( SELECT MIN ( area ) FROM state ) ) ) AND traverse IN ( SELECT state_name FROM state WHERE area = ( SELECT MIN ( area ) FROM state ) );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what is the average population per square km in pennsylvania<CODESPLIT>SELECT population / area FROM state WHERE state_name = "pennsylvania";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what states border states that border states that border florida<CODESPLIT>SELECT border FROM border_info WHERE state_name IN ( SELECT border FROM border_info WHERE state_name IN ( SELECT border FROM border_info WHERE state_name = "florida" ) );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>how many states border at least one other state<CODESPLIT>SELECT COUNT ( DISTINCT state_name ) FROM border_info;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what is the height of the highest mountain in texas<CODESPLIT>SELECT MAX ( DISTINCT highest_elevation ) FROM highlow WHERE state_name = "texas";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>how many states border colorado and border new mexico<CODESPLIT>SELECT COUNT ( border ) FROM border_info WHERE border IN ( SELECT border FROM border_info WHERE state_name = "new mexico" ) AND state_name = "colorado";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>how many major cities are in states bordering nebraska<CODESPLIT>SELECT COUNT ( city_name ) FROM city WHERE population > 150000 AND state_name IN ( SELECT border FROM border_info WHERE state_name = "nebraska" );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what is the total population of the states that border texas<CODESPLIT>SELECT SUM ( t2.population ) FROM state AS t2 JOIN border_info AS t1 ON t2.state_name = t1.border WHERE t1.state_name = "texas";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what are the major lakes in united states<CODESPLIT>SELECT lake_name FROM lake WHERE area > 750;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>name all the lakes of us<CODESPLIT>SELECT lake_name FROM lake;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>how many major rivers cross ohio<CODESPLIT>SELECT COUNT ( river_name ) FROM river WHERE LENGTH > 750 AND traverse = "ohio";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what state has the shortest river<CODESPLIT>SELECT DISTINCT traverse FROM river WHERE LENGTH = ( SELECT MIN ( DISTINCT LENGTH ) FROM river );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>how many states are next to major rivers<CODESPLIT>SELECT COUNT ( DISTINCT traverse ) FROM river WHERE LENGTH > 750;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what is the height of mount mckinley<CODESPLIT>SELECT mountain_altitude FROM mountain WHERE mountain_name = "mckinley";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what states does the shortest river run through<CODESPLIT>SELECT traverse FROM river WHERE LENGTH = ( SELECT MIN ( LENGTH ) FROM river );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what is the highest point in the state with the smallest population<CODESPLIT>SELECT t2.highest_point FROM state AS t1 JOIN highlow AS t2 ON t1.state_name = t2.state_name WHERE t1.state_name IN ( SELECT state_name FROM state WHERE population = ( SELECT MIN ( population ) FROM state ) );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>which rivers run through the state with the lowest elevation in the usa<CODESPLIT>SELECT river_name FROM river WHERE traverse IN ( SELECT state_name FROM highlow WHERE lowest_elevation = ( SELECT MIN ( lowest_elevation ) FROM highlow ) );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what mountains are in alaska<CODESPLIT>SELECT mountain_name FROM mountain WHERE state_name = "alaska";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>how many states have major rivers<CODESPLIT>SELECT COUNT ( traverse ) FROM river WHERE LENGTH > 750;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what is the smallest state through which the longest river runs<CODESPLIT>SELECT state_name FROM state WHERE area = ( SELECT MIN ( area ) FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE LENGTH = ( SELECT MAX ( LENGTH ) FROM river ) ) ) AND state_name IN ( SELECT traverse FROM river WHERE LENGTH = ( SELECT MAX ( LENGTH ) FROM river ) );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what is the largest state traversed by the rio grande river<CODESPLIT>SELECT state_name FROM state WHERE area = ( SELECT MAX ( area ) FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name = "rio grande" ) ) AND state_name IN ( SELECT traverse FROM river WHERE river_name = "rio grande" );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>how many rivers run through the states bordering colorado<CODESPLIT>SELECT COUNT ( river_name ) FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name = "colorado" );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what state has no rivers<CODESPLIT>SELECT state_name FROM state WHERE state_name NOT IN ( SELECT traverse FROM river );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what is the capital of the largest state<CODESPLIT>SELECT capital FROM state WHERE area = ( SELECT MAX ( area ) FROM state );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>how many cities are in texas<CODESPLIT>SELECT COUNT ( city_name ) FROM city WHERE state_name = "texas";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what is the area of the states<CODESPLIT>SELECT area FROM state;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>how many states in the us does the shortest river run through<CODESPLIT>SELECT COUNT ( DISTINCT traverse ) FROM river WHERE LENGTH = ( SELECT MIN ( DISTINCT LENGTH ) FROM river );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what rivers flow through states that border the state with the largest population<CODESPLIT>SELECT river_name FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name IN ( SELECT state_name FROM state WHERE population = ( SELECT MAX ( population ) FROM state ) ) );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what are the major cities in the largest state<CODESPLIT>SELECT city_name FROM city WHERE population > 150000 AND state_name = ( SELECT state_name FROM state WHERE area = ( SELECT MAX ( area ) FROM state ) );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what is the area of the smallest state<CODESPLIT>SELECT area FROM state WHERE area = ( SELECT MIN ( area ) FROM state );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>which states border the longest river in the usa<CODESPLIT>SELECT border FROM border_info WHERE state_name IN ( SELECT traverse FROM river WHERE LENGTH = ( SELECT MAX ( LENGTH ) FROM river ) );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what is the population density of the state with the smallest population<CODESPLIT>SELECT density FROM state WHERE population = ( SELECT MIN ( population ) FROM state );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>how many states border the mississippi river<CODESPLIT>SELECT COUNT ( DISTINCT border ) FROM border_info WHERE state_name IN ( SELECT traverse FROM river WHERE river_name = "mississippi" );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what states have a capital that is the highest point in the state<CODESPLIT>SELECT t1.state_name FROM state AS t1 JOIN highlow AS t2 ON t1.capital = t2.highest_point;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what is the population of the capital of the smallest state<CODESPLIT>SELECT population FROM city WHERE city_name = ( SELECT capital FROM state WHERE area = ( SELECT MIN ( area ) FROM state ) );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what is the population of the capital of the largest state<CODESPLIT>SELECT population FROM city WHERE city_name = ( SELECT capital FROM state WHERE area = ( SELECT MAX ( area ) FROM state ) );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what is the lowest point of the state with the largest area<CODESPLIT>SELECT t2.lowest_point FROM state AS t1 JOIN highlow AS t2 ON t1.state_name = t2.state_name WHERE t1.state_name IN ( SELECT state_name FROM state WHERE area = ( SELECT MAX ( area ) FROM state ) );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what states border states that border the state with the largest population<CODESPLIT>SELECT t1.border FROM border_info AS t2 JOIN border_info AS t1 ON t2.border = t1.state_name WHERE t2.state_name IN ( SELECT state_name FROM state WHERE population = ( SELECT MAX ( population ) FROM state ) );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what is the size of the largest state in the usa<CODESPLIT>SELECT MAX ( area ) FROM state;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>which capitals are not major cities<CODESPLIT>SELECT t2.capital FROM state AS t2 JOIN city AS t1 ON t2.capital = t1.city_name WHERE t1.population <= 150000;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>give me the cities in usa<CODESPLIT>SELECT city_name FROM city;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what is the highest point of the state with the largest area<CODESPLIT>SELECT t2.highest_point FROM state AS t1 JOIN highlow AS t2 ON t1.state_name = t2.state_name WHERE t1.state_name IN ( SELECT state_name FROM state WHERE area = ( SELECT MAX ( area ) FROM state ) );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>where is massachusetts<CODESPLIT>SELECT country_name FROM state WHERE state_name = "massachusetts";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what state has the largest urban population<CODESPLIT>SELECT state_name FROM city GROUP BY state_name ORDER BY SUM ( population ) DESC LIMIT 1;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what are the major rivers in the us<CODESPLIT>SELECT river_name FROM river;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>how many cities named austin are there in the usa<CODESPLIT>SELECT COUNT ( city_name ) FROM city WHERE city_name = "austin";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>how many people live in the smallest state bordering wyoming<CODESPLIT>SELECT population FROM state WHERE population = ( SELECT MAX ( population ) FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name = "wyoming" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name = "wyoming" );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what is the length of the colorado river in texas<CODESPLIT>SELECT LENGTH FROM river WHERE river_name = "colorado" AND traverse = "texas";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what is the population density in the state with capital austin<CODESPLIT>SELECT density FROM state WHERE capital = "austin";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>how long is the shortest river in the usa<CODESPLIT>SELECT LENGTH FROM river WHERE LENGTH = ( SELECT MIN ( LENGTH ) FROM river );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what is the elevation of death valley<CODESPLIT>SELECT lowest_elevation FROM highlow WHERE lowest_point = "death valley";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what is the average population of the us by state<CODESPLIT>SELECT AVG ( population ) FROM state;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what rivers flow through the largest state<CODESPLIT>SELECT river_name FROM river WHERE traverse IN ( SELECT state_name FROM state WHERE area = ( SELECT MAX ( area ) FROM state ) );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what states border states that border states that border states that border texas<CODESPLIT>SELECT t1.border FROM border_info AS t2 JOIN border_info AS t1 ON t2.border = t1.state_name JOIN border_info AS t3 ON t3.border = t2.state_name JOIN border_info AS t4 ON t4.border = t3.state_name WHERE t4.state_name = "texas";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>how many states border on the state whose capital is boston<CODESPLIT>SELECT COUNT ( border ) FROM border_info WHERE state_name = ( SELECT state_name FROM state WHERE capital = "boston" );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what are the major cities in the states through which the major river in virginia runs<CODESPLIT>SELECT city_name FROM city WHERE population > 150000 AND state_name IN ( SELECT traverse FROM river WHERE river_name IN ( SELECT river_name FROM river WHERE LENGTH > 750 AND traverse = "virginia" ) );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>which states does not border texas<CODESPLIT>SELECT state_name FROM state WHERE state_name NOT IN ( SELECT border FROM border_info WHERE state_name = "texas" );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>how many states border the largest state<CODESPLIT>SELECT COUNT ( border ) FROM border_info WHERE state_name = ( SELECT state_name FROM state WHERE area = ( SELECT MAX ( area ) FROM state ) );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>which state is the largest city in montana in<CODESPLIT>SELECT state_name FROM city WHERE population = ( SELECT MAX ( population ) FROM city WHERE state_name = "montana" ) AND state_name = "montana";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what is capital of the state with the lowest point<CODESPLIT>SELECT t1.capital FROM highlow AS t2 JOIN state AS t1 ON t1.state_name = t2.state_name WHERE t2.lowest_elevation = ( SELECT MIN ( lowest_elevation ) FROM highlow ) ;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what is the biggest american city in a state with a river<CODESPLIT>SELECT DISTINCT t1.city_name FROM city AS t1 JOIN river AS t2 ON t2.traverse = t1.state_name WHERE t1.population = ( SELECT MAX ( t1.population ) FROM river AS t2 JOIN city AS t1 ON t2.traverse = t1.state_name );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>how many rivers are in the state with the largest population<CODESPLIT>SELECT COUNT ( t2.river_name ) FROM river AS t2 JOIN state AS t1 ON t1.state_name = t2.traverse WHERE t1.state_name = ( SELECT state_name FROM state WHERE population = ( SELECT MAX ( population ) FROM state ) );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what is the largest state that borders the state with the lowest point in the usa<CODESPLIT>SELECT t1.state_name FROM highlow AS t3 JOIN border_info AS t1 ON t3.state_name = t1.border JOIN state AS t2 ON t2.state_name = t1.border WHERE t3.lowest_elevation = ( SELECT MIN ( lowest_elevation ) FROM highlow ) ORDER BY t2.area DESC LIMIT 1;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what is the capital of the state with the highest point<CODESPLIT>SELECT t1.capital FROM highlow AS t2 JOIN state AS t1 ON t1.state_name = t2.state_name WHERE t2.highest_elevation = ( SELECT MAX ( highest_elevation ) FROM highlow );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what is the highest point in the smallest state<CODESPLIT>SELECT t2.highest_point FROM highlow AS t2 JOIN state AS t1 ON t1.state_name = t2.state_name WHERE t1.area = ( SELECT MIN ( area ) FROM state );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>how many rivers are in the state with the highest point.<CODESPLIT>SELECT COUNT ( t1.river_name ) FROM highlow AS t2 JOIN river AS t1 ON t1.traverse = t2.state_name WHERE t2.highest_elevation = ( SELECT MAX ( highest_elevation ) FROM highlow );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>how high is the highest point in the largest state<CODESPLIT>SELECT t2.highest_elevation FROM highlow AS t2 JOIN state AS t1 ON t1.state_name = t2.state_name WHERE t1.area = ( SELECT MAX ( area ) FROM state );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what is the longest river in the state with the highest point<CODESPLIT>SELECT t1.river_name FROM highlow AS t2 JOIN river AS t1 ON t1.traverse = t2.state_name WHERE t2.highest_elevation = ( SELECT MAX ( highest_elevation ) FROM highlow ) ORDER BY t1.length DESC LIMIT 1;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>papers that are coauthored by Peter Mertens and Dina Barbian<CODESPLIT>SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid = t2.authorid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid WHERE t2.authorname = "Peter Mertens" AND t1.authorname = "Dina Barbian";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>who has written the most syntactic parsing papers ?<CODESPLIT>SELECT DISTINCT COUNT ( t4.paperid ) , t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid = t2.keyphraseid JOIN paper AS t4 ON t4.paperid = t1.paperid JOIN writes AS t3 ON t3.paperid = t4.paperid WHERE t2.keyphrasename = "syntactic parsing" GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>How many citation noah a smith has ?<CODESPLIT>SELECT DISTINCT COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid = t4.citedpaperid JOIN writes AS t2 ON t2.paperid = t3.paperid JOIN author AS t1 ON t2.authorid = t1.authorid WHERE t1.authorname = "noah a smith";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>chi papers<CODESPLIT>SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid = t1.venueid WHERE t2.venuename = "chi";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Has mirella lapata written any papers in 2016 ?<CODESPLIT>SELECT DISTINCT COUNT ( t3.paperid ) , t2.authorid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid WHERE t1.authorname = "mirella lapata" AND t3.year = 2016 GROUP BY t2.authorid;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>What papers has sharon goldwater written ?<CODESPLIT>SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid WHERE t1.authorname = "sharon goldwater";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>What was oren etzioni 's latest paper ?<CODESPLIT>SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid WHERE t1.authorname = "oren etzioni" ORDER BY t3.year DESC;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>are there any monte carlo simulation papers since 2011 ?<CODESPLIT>SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.keyphrasename = "monte carlo simulation" AND t3.year > 2011;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>does ras bodik publish a lot ?<CODESPLIT>SELECT COUNT ( t3.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid WHERE t1.authorname = "ras bodik";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>How many papers did David M. Blei publish at AISTATS ?<CODESPLIT>SELECT DISTINCT COUNT ( t3.paperid ) FROM venue AS t4 JOIN paper AS t3 ON t4.venueid = t3.venueid JOIN writes AS t2 ON t2.paperid = t3.paperid JOIN author AS t1 ON t2.authorid = t1.authorid WHERE t1.authorname = "David M. Blei" AND t4.venuename = "AISTATS";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>List all academic papers on machine networks for one shot learning<CODESPLIT>SELECT DISTINCT paperid FROM paper WHERE title = "machine networks for one shot learning";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>which EMNLP 2010 papers have the most citations ?<CODESPLIT>SELECT DISTINCT t3.citedpaperid , COUNT ( t3.citedpaperid ) FROM paper AS t1 JOIN cite AS t3 ON t1.paperid = t3.citedpaperid JOIN venue AS t2 ON t2.venueid = t1.venueid WHERE t1.year = 2010 AND t2.venuename = "EMNLP" GROUP BY t3.citedpaperid ORDER BY COUNT ( t3.citedpaperid ) DESC;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>What papers were published at CVPR in 2016 about Class consistent multi-modal fusion with binary features applied to RGB-D Object Dataset ?<CODESPLIT>SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid = t1.datasetid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN venue AS t4 ON t4.venueid = t3.venueid WHERE t1.datasetname = "RGB-D Object Dataset" AND t3.title = "Class consistent multi-modal fusion with binary features" AND t3.year = 2016 AND t4.venuename = "CVPR";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>How many papers are in deep learning ?<CODESPLIT>SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.keyphrasename = "deep learning";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>How many papers has Christopher D. Manning written ?<CODESPLIT>SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid WHERE t1.authorname = "Christopher D. Manning";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what kind of papers does Luke Zettlemoyer publish<CODESPLIT>SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t5 ON t4.authorid = t5.authorid WHERE t5.authorname = "Luke Zettlemoyer";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>What conference does Daniella Coelho publish in ?<CODESPLIT>SELECT DISTINCT t3.venueid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid WHERE t1.authorname = "Daniella Coelho";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>How many papers are there ?<CODESPLIT>SELECT DISTINCT COUNT ( DISTINCT paperid ) FROM paper;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>How many papers by Ed Desmond contain the keyphrases Semantic Parsing ?<CODESPLIT>SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperkeyphrase AS t1 JOIN keyphrase AS t4 ON t1.keyphraseid = t4.keyphraseid JOIN writes AS t3 ON t3.paperid = t1.paperid JOIN author AS t2 ON t3.authorid = t2.authorid WHERE t2.authorname = "Ed Desmond" AND t4.keyphrasename = "Semantic Parsing";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>What conferences did li dong submit to in 2016 ?<CODESPLIT>SELECT DISTINCT t3.venueid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid WHERE t1.authorname = "li dong" AND t3.year = 2016;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>acl papers in 2012 on Parsing<CODESPLIT>SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN venue AS t4 ON t4.venueid = t3.venueid WHERE t1.keyphrasename = "Parsing" AND t3.year = 2012 AND t4.venuename = "acl";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>List the popular publications on dependent types<CODESPLIT>SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.keyphrasename = "dependent types";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>List papers that has a keyword Question Answering<CODESPLIT>SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.keyphrasename = "Question Answering";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>keyphrases used by Luke S Zettlemoyer for each year<CODESPLIT>SELECT DISTINCT t2.keyphraseid , t3.year FROM paper AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid = t2.paperid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid WHERE t1.authorname = "Luke S Zettlemoyer" ORDER BY t3.year , t2.keyphraseid;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>recent research interests of sanjeev arora<CODESPLIT>SELECT DISTINCT t1.keyphrasename , t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t5 ON t4.authorid = t5.authorid WHERE t5.authorname = "sanjeev arora" ORDER BY t3.year DESC;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>list papers published by balakrishnan prabhakaran<CODESPLIT>SELECT DISTINCT t3.paperid , t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid WHERE t1.authorname = "balakrishnan prabhakaran";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>citation count of zachary tatlock 's papers<CODESPLIT>SELECT DISTINCT t3.paperid , t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid WHERE t1.authorname = "zachary tatlock";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>subhasis chaudhuri<CODESPLIT>SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid WHERE t1.authorname = "subhasis chaudhuri";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>how many parsing papers in ACL 2014<CODESPLIT>SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN venue AS t4 ON t4.venueid = t3.venueid WHERE t1.keyphrasename = "parsing" AND t3.year = 2014 AND t4.venuename = "ACL";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>brian curless convolution paper<CODESPLIT>SELECT DISTINCT t1.authorid , t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid = t5.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid WHERE t1.authorname = "brian curless" AND t5.keyphrasename = "convolution";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>What papers has Liwen Xiong written in 2015<CODESPLIT>SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid WHERE t1.authorname = "Liwen Xiong" AND t3.year = 2015;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>What TAIL paper published in NIPS ?<CODESPLIT>SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN venue AS t4 ON t4.venueid = t3.venueid WHERE t1.keyphrasename = "TAIL" AND t4.venuename = "NIPS";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>How many co-authors has Mark Steedman had ?<CODESPLIT>SELECT DISTINCT COUNT ( DISTINCT t1.authorid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid WHERE t1.authorname != "Mark Steedman" AND t2.paperid IN ( SELECT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid WHERE t1.authorname = "Mark Steedman" );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>keyphrases used by Christof Dallermassl in 2000<CODESPLIT>SELECT DISTINCT t2.keyphraseid FROM paper AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid = t2.paperid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid WHERE t1.authorname = "Christof Dallermassl" AND t3.year = 2000;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what author is most cited ?<CODESPLIT>SELECT DISTINCT t1.authorname , COUNT ( t3.citingpaperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN cite AS t3 ON t2.paperid = t3.citedpaperid GROUP BY t1.authorname ORDER BY COUNT ( t3.citingpaperid ) DESC;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>journal articles by mohammad rastegari<CODESPLIT>SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid WHERE t1.authorname = "mohammad rastegari" AND t3.journalid >= 0;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>best paper in TACL 2014 ?<CODESPLIT>SELECT DISTINCT COUNT ( DISTINCT t3.citingpaperid ) , t1.paperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid = t3.citedpaperid JOIN venue AS t2 ON t2.venueid = t1.venueid WHERE t1.year = 2014 AND t2.venuename = "TACL" GROUP BY t1.paperid ORDER BY COUNT ( DISTINCT t3.citingpaperid ) DESC;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>who published at acl 2016 ?<CODESPLIT>SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid = t2.venueid JOIN writes AS t1 ON t1.paperid = t2.paperid WHERE t2.year = 2016 AND t3.venuename = "acl";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>How many papers were written on Multiuser Receiver in the Decision Feedback this year ?<CODESPLIT>SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.keyphrasename = "Multiuser Receiver in the Decision Feedback" AND t3.year = 2016 GROUP BY t3.paperid HAVING COUNT ( DISTINCT t1.keyphrasename ) > 1;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>How many papers run experiments on ImageNet ?<CODESPLIT>SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid = t1.datasetid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.datasetname LIKE "ImageNet";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>How many papers did Mirella Lapata cite ?<CODESPLIT>SELECT DISTINCT COUNT ( t3.citedpaperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN cite AS t3 ON t2.paperid = t3.citingpaperid WHERE t1.authorname = "Mirella Lapata";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>When does Michael Stonebraker publish the first VLDB paper ?<CODESPLIT>SELECT DISTINCT t3.year FROM venue AS t4 JOIN paper AS t3 ON t4.venueid = t3.venueid JOIN writes AS t2 ON t2.paperid = t3.paperid JOIN author AS t1 ON t2.authorid = t1.authorid WHERE t1.authorname = "Michael Stonebraker" AND t4.venuename = "VLDB" ORDER BY t3.year;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>semantic parsing dataset<CODESPLIT>SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid = t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid = t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid = t4.keyphraseid WHERE t4.keyphrasename = "semantic parsing";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>where does Peter Mertens publish ?<CODESPLIT>SELECT DISTINCT t3.journalid , t4.venueid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid = t3.venueid JOIN writes AS t2 ON t2.paperid = t3.paperid JOIN author AS t1 ON t2.authorid = t1.authorid WHERE t1.authorname = "Peter Mertens";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>how many papers appeared at nature communications last year<CODESPLIT>SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid = t1.venueid WHERE t1.year = 2015 AND t2.venuename = "nature communications";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what was the first deep learning paper ?<CODESPLIT>SELECT DISTINCT t2.datasetid , t4.year FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid = t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid = t3.paperid JOIN paper AS t4 ON t4.paperid = t3.paperid JOIN keyphrase AS t5 ON t1.keyphraseid = t5.keyphraseid WHERE t5.keyphrasename = "deep learning" ORDER BY t4.year ASC;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>datasets mentioned at ACL<CODESPLIT>SELECT DISTINCT t1.datasetid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid = t1.datasetid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN venue AS t4 ON t4.venueid = t3.venueid WHERE t4.venuename = "ACL";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>the papers on semantic parsing by li dong at acl in 2016<CODESPLIT>SELECT DISTINCT t2.paperid FROM paperkeyphrase AS t5 JOIN keyphrase AS t3 ON t5.keyphraseid = t3.keyphraseid JOIN paper AS t2 ON t2.paperid = t5.paperid JOIN venue AS t6 ON t6.venueid = t2.venueid JOIN writes AS t4 ON t4.paperid = t2.paperid JOIN author AS t1 ON t4.authorid = t1.authorid WHERE t1.authorname = "li dong" AND t3.keyphrasename = "semantic parsing" AND t2.year = 2016 AND t6.venuename = "acl";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>How many papers were written on convolutional neural networks in the past year ?<CODESPLIT>SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.keyphrasename = "convolutional neural networks" AND t3.year = 2016;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>What papers were written on question answering this year ?<CODESPLIT>SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.keyphrasename = "question answering" AND t3.year = 2016;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>which year had the most NIPS papers ?<CODESPLIT>SELECT DISTINCT COUNT ( t1.paperid ) , t1.year FROM venue AS t2 JOIN paper AS t1 ON t2.venueid = t1.venueid WHERE t2.venuename = "NIPS" GROUP BY t1.year ORDER BY COUNT ( t1.paperid ) DESC;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>who writes papers with Noah A Smith ?<CODESPLIT>SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid = t2.authorid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid WHERE t2.authorname = "Noah A Smith";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what datasets did jitendra malik use ?<CODESPLIT>SELECT DISTINCT t2.datasetid FROM paper AS t3 JOIN paperdataset AS t2 ON t3.paperid = t2.paperid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid WHERE t1.authorname = "jitendra malik";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>recent deep learning papers<CODESPLIT>SELECT DISTINCT t3.paperid , t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.keyphrasename = "deep learning" ORDER BY t3.year DESC;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>What years did Pedro Domingos publish papers in ?<CODESPLIT>SELECT DISTINCT t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid WHERE t1.authorname = "Pedro Domingos" GROUP BY t3.year;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>jamie callan 's publications by year<CODESPLIT>SELECT DISTINCT t3.paperid , t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid WHERE t1.authorname = "jamie callan" ORDER BY t3.year;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>How many papers does jamie callan publish each year ?<CODESPLIT>SELECT DISTINCT COUNT ( t3.paperid ) , t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid WHERE t1.authorname = "jamie callan" GROUP BY t3.year;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>who does oren etzioni cite<CODESPLIT>SELECT DISTINCT t3.paperid FROM paper AS t3 JOIN cite AS t4 ON t3.paperid = t4.citingpaperid JOIN writes AS t2 ON t2.paperid = t4.citedpaperid JOIN author AS t1 ON t2.authorid = t1.authorid WHERE t1.authorname = "oren etzioni";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>papers citing Daniel Jurafsky<CODESPLIT>SELECT DISTINCT t3.paperid FROM paper AS t3 JOIN cite AS t4 ON t3.paperid = t4.citingpaperid JOIN writes AS t2 ON t2.paperid = t4.citedpaperid JOIN author AS t1 ON t2.authorid = t1.authorid WHERE t1.authorname = "Daniel Jurafsky";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>journal papers for instance segmentation<CODESPLIT>SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.keyphrasename = "instance segmentation" AND t3.journalid >= 0;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>who has the most papers in semantic parsing after 2005 ?<CODESPLIT>SELECT DISTINCT COUNT ( t4.paperid ) , t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid = t2.keyphraseid JOIN paper AS t4 ON t4.paperid = t1.paperid JOIN writes AS t3 ON t3.paperid = t4.paperid WHERE t2.keyphrasename = "semantic parsing" AND t4.year > 2005 GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>How many citations does Dan Makumbi 's Genetic Identity paper have ?<CODESPLIT>SELECT DISTINCT COUNT ( t5.citingpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t3 ON t2.keyphraseid = t3.keyphraseid JOIN writes AS t4 ON t4.paperid = t2.paperid JOIN cite AS t5 ON t4.paperid = t5.citedpaperid JOIN author AS t1 ON t4.authorid = t1.authorid WHERE t1.authorname = "Dan Makumbi" AND t3.keyphrasename = "Genetic Identity";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>character recognition papers earlier than 2010<CODESPLIT>SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.keyphrasename = "character recognition" AND t3.year < 2010;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what topics does oren etzioni write about most ?<CODESPLIT>SELECT DISTINCT COUNT ( t2.keyphraseid ) , t2.keyphraseid FROM paper AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid = t2.paperid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid WHERE t1.authorname = "oren etzioni" GROUP BY t2.keyphraseid ORDER BY COUNT ( t2.keyphraseid ) DESC;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>How many papers related to deep learning cited the dataset ImageNet ?<CODESPLIT>SELECT DISTINCT COUNT ( t4.paperid ) FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid = t2.datasetid JOIN paper AS t4 ON t4.paperid = t3.paperid JOIN paperkeyphrase AS t1 ON t4.paperid = t1.paperid JOIN keyphrase AS t5 ON t1.keyphraseid = t5.keyphraseid WHERE t2.datasetname = "ImageNet" AND t5.keyphrasename = "deep learning";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>most cited papers on parsing<CODESPLIT>SELECT DISTINCT t4.citedpaperid , COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN cite AS t4 ON t3.paperid = t4.citedpaperid WHERE t1.keyphrasename = "parsing" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>What paper did Michael Armstrong wrote in the 90s ?<CODESPLIT>SELECT DISTINCT t3.year , t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid WHERE t1.authorname LIKE "Michael Armstrong" AND t3.year LIKE "199";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>What is the most cited paper by ohad shamir ?<CODESPLIT>SELECT DISTINCT t4.citedpaperid , COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid = t4.citedpaperid JOIN writes AS t2 ON t2.paperid = t3.paperid JOIN author AS t1 ON t2.authorid = t1.authorid WHERE t1.authorname = "ohad shamir" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>How many papers did michael i. jordan publish in 2016 ?<CODESPLIT>SELECT DISTINCT COUNT ( t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid WHERE t1.authorname = "michael i. jordan" AND t3.year = 2016;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>count of ACL papers by author<CODESPLIT>SELECT DISTINCT COUNT ( t2.paperid ) , t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid = t2.venueid JOIN writes AS t1 ON t1.paperid = t2.paperid WHERE t3.venuename = "ACL" GROUP BY t1.authorid;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>who wrote the most papers for CVPR 2007<CODESPLIT>SELECT DISTINCT COUNT ( t2.paperid ) , t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid = t2.venueid JOIN writes AS t1 ON t1.paperid = t2.paperid WHERE t2.year = 2007 AND t3.venuename = "CVPR" GROUP BY t1.authorid ORDER BY COUNT ( t2.paperid ) DESC;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>How many papers in ACL 2015 ?<CODESPLIT>SELECT DISTINCT COUNT ( DISTINCT t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid = t1.venueid WHERE t1.year = 2015 AND t2.venuename = "ACL";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>papers from 2014<CODESPLIT>SELECT DISTINCT paperid FROM paper WHERE YEAR = 2014;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>What papers does Richard Ladner have in chi ?<CODESPLIT>SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid = t3.venueid JOIN writes AS t2 ON t2.paperid = t3.paperid JOIN author AS t1 ON t2.authorid = t1.authorid WHERE t1.authorname = "Richard Ladner" AND t4.venuename = "chi";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>What is the paper with the most citation about Artificial Intelligence ?<CODESPLIT>SELECT DISTINCT t4.citedpaperid , COUNT ( t4.citingpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN cite AS t4 ON t3.paperid = t4.citedpaperid WHERE t1.keyphrasename = "Artificial Intelligence" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citingpaperid ) DESC;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>topics at ACL 2014<CODESPLIT>SELECT DISTINCT COUNT ( t3.paperid ) , t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN venue AS t4 ON t4.venueid = t3.venueid WHERE t3.year = 2014 AND t4.venuename = "ACL" GROUP BY t1.keyphraseid ORDER BY COUNT ( t3.paperid ) DESC;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>most common topics at NIPS 2015<CODESPLIT>SELECT DISTINCT COUNT ( t3.paperid ) , t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN venue AS t4 ON t4.venueid = t3.venueid WHERE t3.year = 2015 AND t4.venuename = "NIPS" GROUP BY t1.keyphraseid ORDER BY COUNT ( t3.paperid ) DESC;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>How many papers related to deep reinforcement learning in nips ?<CODESPLIT>SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN venue AS t4 ON t4.venueid = t3.venueid WHERE t1.keyphrasename = "deep reinforcement learning" AND t4.venuename = "nips";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Papers on WebKB<CODESPLIT>SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid = t1.datasetid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.datasetname = "WebKB";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>conferences in 2013<CODESPLIT>SELECT DISTINCT venueid FROM paper WHERE YEAR = 2013;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>how is the most cited author in CVPR ?<CODESPLIT>SELECT DISTINCT COUNT ( DISTINCT t4.citingpaperid ) , t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid = t2.venueid JOIN writes AS t1 ON t1.paperid = t2.paperid JOIN cite AS t4 ON t1.paperid = t4.citedpaperid WHERE t3.venuename = "CVPR" GROUP BY t1.authorid ORDER BY COUNT ( DISTINCT t4.citingpaperid ) DESC;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what are some syntactic parsing papers that chris dyer did not write ?<CODESPLIT>SELECT DISTINCT t1.authorname , t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid = t5.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid WHERE t1.authorname != "chris dyer" AND t5.keyphrasename = "syntactic parsing";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>papers published in the last year<CODESPLIT>SELECT DISTINCT paperid FROM paper WHERE YEAR = ( SELECT MAX ( YEAR ) FROM paper );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>When was benjamin mako hill 's first publication ?<CODESPLIT>SELECT DISTINCT COUNT ( t3.paperid ) , t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid WHERE t1.authorname = "benjamin mako hill" GROUP BY t3.year ORDER BY t3.year;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>When did ameet soni publish ?<CODESPLIT>SELECT DISTINCT COUNT ( t3.paperid ) , t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid WHERE t1.authorname = "ameet soni" GROUP BY t3.year ORDER BY t3.year;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Who cites Daniel A Reed the most<CODESPLIT>SELECT DISTINCT COUNT ( t4.citingpaperid ) , t3.authorid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN cite AS t4 ON t2.paperid = t4.citedpaperid JOIN writes AS t3 ON t3.paperid = t4.citingpaperid WHERE t1.authorname = "Daniel A Reed" GROUP BY t3.authorid ORDER BY COUNT ( t4.citingpaperid ) DESC;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>how many papers are in sigir ?<CODESPLIT>SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid = t1.venueid WHERE t2.venuename = "sigir";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what papers have fewer than 5 citations by ACL papers ?<CODESPLIT>SELECT DISTINCT t3.citingpaperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid = t3.citedpaperid JOIN venue AS t2 ON t2.venueid = t1.venueid WHERE t2.venuename = "ACL" GROUP BY t3.citingpaperid HAVING COUNT ( DISTINCT t3.citedpaperid ) < 5;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>What are the 5 most recent papers of Mirella Lapata ?<CODESPLIT>SELECT DISTINCT t3.paperid , t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid WHERE t1.authorname = "Mirella Lapata" ORDER BY t3.year DESC LIMIT 5;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>What were the papers published at pldi 2015 ?<CODESPLIT>SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid = t1.venueid WHERE t1.year = 2015 AND t2.venuename = "pldi";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>List today 's journals<CODESPLIT>SELECT DISTINCT journalid FROM paper WHERE YEAR = 2011 GROUP BY journalid;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>ACL papers in 2016 with neural attention in the title<CODESPLIT>SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid = t1.venueid WHERE t1.title LIKE "neural attention" AND t1.year = 2016 AND t2.venuename = "ACL";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Who writes a lot of papers in Machine Learning ?<CODESPLIT>SELECT DISTINCT t1.authorname FROM paperkeyphrase AS t2 JOIN keyphrase AS t4 ON t2.keyphraseid = t4.keyphraseid JOIN writes AS t3 ON t3.paperid = t2.paperid JOIN author AS t1 ON t3.authorid = t1.authorid WHERE t4.keyphrasename = "Machine Learning" GROUP BY t1.authorname ORDER BY COUNT ( DISTINCT t3.paperid ) DESC;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Who wrote sensor fusion ?<CODESPLIT>SELECT DISTINCT t1.authorname FROM paperkeyphrase AS t2 JOIN keyphrase AS t4 ON t2.keyphraseid = t4.keyphraseid JOIN writes AS t3 ON t3.paperid = t2.paperid JOIN author AS t1 ON t3.authorid = t1.authorid WHERE t4.keyphrasename LIKE "sensor fusion";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>how many papers by dan klein are cited by michael i. jordan<CODESPLIT>SELECT DISTINCT COUNT ( t5.citingpaperid ) FROM writes AS t3 JOIN author AS t2 ON t3.authorid = t2.authorid JOIN cite AS t5 ON t3.paperid = t5.citedpaperid JOIN writes AS t4 ON t4.paperid = t5.citingpaperid JOIN author AS t1 ON t4.authorid = t1.authorid WHERE t2.authorname = "michael i. jordan" AND t1.authorname = "dan klein";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>who else was on the paper with Ameet Soni and Ras Bodik ?<CODESPLIT>SELECT DISTINCT t5.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid = t2.authorid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN writes AS t5 ON t5.paperid = t4.paperid JOIN author AS t1 ON t4.authorid = t1.authorid WHERE t2.authorname = "Ameet Soni" AND t1.authorname = "Ras Bodik";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>2014 papers using ImageNet<CODESPLIT>SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid = t1.datasetid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.datasetname = "ImageNet" AND t3.year = 2014;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>What journals are Takashi Matsumoto 's articles published in ?<CODESPLIT>SELECT DISTINCT t3.journalid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid WHERE t1.authorname = "Takashi Matsumoto" GROUP BY t3.journalid;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>What authors wrote papers about Bacterial Wilt in 2016 ?<CODESPLIT>SELECT DISTINCT t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid = t2.keyphraseid JOIN paper AS t4 ON t4.paperid = t1.paperid JOIN writes AS t3 ON t3.paperid = t4.paperid JOIN author AS t5 ON t3.authorid = t5.authorid WHERE t2.keyphrasename = "Bacterial Wilt" AND t4.year = 2016;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>When did Luke S Zettlemoyer publish ?<CODESPLIT>SELECT DISTINCT t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid WHERE t1.authorname = "Luke S Zettlemoyer" ORDER BY t3.year;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what keyphrases get most citations ?<CODESPLIT>SELECT DISTINCT COUNT ( t3.citingpaperid ) , t1.keyphrasename FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN cite AS t3 ON t2.paperid = t3.citedpaperid GROUP BY t1.keyphrasename ORDER BY COUNT ( t3.citingpaperid ) DESC;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Find journals about Temporal Data .<CODESPLIT>SELECT DISTINCT t3.journalid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.keyphrasename = "Temporal Data" GROUP BY t3.journalid;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>which ACL 2014 papers about Parsing used Jeopardy! Questions ?<CODESPLIT>SELECT DISTINCT t2.paperid FROM paperdataset AS t3 JOIN dataset AS t5 ON t3.datasetid = t5.datasetid JOIN paperkeyphrase AS t4 ON t4.paperid = t3.paperid JOIN paper AS t2 ON t2.paperid = t3.paperid JOIN venue AS t6 ON t6.venueid = t2.venueid JOIN keyphrase AS t1 ON t4.keyphraseid = t1.keyphraseid WHERE t5.datasetname = "Jeopardy! Questions" AND t1.keyphrasename = "Parsing" AND t2.year = 2014 AND t6.venuename = "ACL";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>in what journals does linda shapiro publish ?<CODESPLIT>SELECT DISTINCT t2.journalid FROM paper AS t3 JOIN journal AS t2 ON t3.journalid = t2.journalid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid WHERE t1.authorname = "linda shapiro";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>NIPS authors<CODESPLIT>SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid = t2.venueid JOIN writes AS t1 ON t1.paperid = t2.paperid WHERE t3.venuename = "NIPS";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>which venue publishes the most papers about deep learning<CODESPLIT>SELECT DISTINCT COUNT ( t3.paperid ) , t4.venueid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN venue AS t4 ON t4.venueid = t3.venueid WHERE t1.keyphrasename = "deep learning" GROUP BY t4.venueid ORDER BY COUNT ( t3.paperid ) DESC;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>How many publications were added to the Cell journal this year ?<CODESPLIT>SELECT DISTINCT COUNT ( t3.paperid ) FROM paper AS t3 JOIN journal AS t2 ON t3.journalid = t2.journalid JOIN paperkeyphrase AS t1 ON t3.paperid = t1.paperid WHERE t2.journalname = "Cell" AND t3.year = 2015;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>What are all the publication titles by Donald E Knuth ?<CODESPLIT>SELECT DISTINCT t3.title FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid WHERE t1.authorname = "Donald E Knuth";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>papers published in eccv 2016 by ali farhadi<CODESPLIT>SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid = t3.venueid JOIN writes AS t2 ON t2.paperid = t3.paperid JOIN author AS t1 ON t2.authorid = t1.authorid WHERE t1.authorname = "ali farhadi" AND t3.year = 2016 AND t4.venuename = "eccv";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>What are some papers dealing with Semantic Data in YAGO ?<CODESPLIT>SELECT DISTINCT t2.paperid FROM paperdataset AS t3 JOIN dataset AS t1 ON t3.datasetid = t1.datasetid JOIN paperkeyphrase AS t2 ON t2.paperid = t3.paperid JOIN keyphrase AS t4 ON t2.keyphraseid = t4.keyphraseid WHERE t1.datasetname = "YAGO" AND t4.keyphrasename = "Semantic Data";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Who has published more papers in chi ?<CODESPLIT>SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) , t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid = t2.venueid JOIN writes AS t1 ON t1.paperid = t2.paperid WHERE t3.venuename = "chi" GROUP BY t1.authorid ORDER BY COUNT ( DISTINCT t2.paperid ) DESC;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>In what year did Ye Cao publish the most papers<CODESPLIT>SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) , t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid WHERE t1.authorname LIKE "Ye Cao" GROUP BY t3.year ORDER BY COUNT ( DISTINCT t3.paperid ) DESC;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>conferences that mention ImageNet<CODESPLIT>SELECT DISTINCT t3.venueid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid = t1.datasetid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.datasetname = "ImageNet";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>first deep learning paper<CODESPLIT>SELECT DISTINCT t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.keyphrasename = "deep learning" GROUP BY t3.year ORDER BY t3.year ASC;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what papers were published in Academic radiology in 1995 ?<CODESPLIT>SELECT DISTINCT t2.paperid FROM paper AS t2 JOIN journal AS t1 ON t2.journalid = t1.journalid WHERE t1.journalname = "Academic radiology" AND t2.year = 1995;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what papers do parsing papers typically cite ?<CODESPLIT>SELECT DISTINCT t4.citedpaperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN cite AS t4 ON t3.paperid = t4.citingpaperid WHERE t1.keyphrasename = "parsing";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>venue for Trophic Cascade<CODESPLIT>SELECT DISTINCT t3.venueid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.keyphrasename = "Trophic Cascade";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>How many papers were written on question answering in 2011 through 2016 ?<CODESPLIT>SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.keyphrasename = "question answering" AND t3.year >= 2011;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>What are the best NLP conferences ?<CODESPLIT>SELECT DISTINCT COUNT ( DISTINCT t4.citingpaperid ) , t3.venueid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN cite AS t4 ON t3.paperid = t4.citedpaperid WHERE t1.keyphrasename = "NLP" GROUP BY t3.venueid ORDER BY COUNT ( DISTINCT t4.citingpaperid ) DESC;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>ACL papers by author<CODESPLIT>SELECT DISTINCT t2.paperid , t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid = t2.venueid JOIN writes AS t1 ON t1.paperid = t2.paperid WHERE t3.venuename = "ACL";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>papers with more than 10 citations<CODESPLIT>SELECT DISTINCT t2.citingpaperid FROM paper AS t1 JOIN cite AS t2 ON t1.paperid = t2.citedpaperid GROUP BY t2.citingpaperid HAVING COUNT ( DISTINCT t2.citedpaperid ) > 10;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Which authors published papers in 2015 ?<CODESPLIT>SELECT DISTINCT t1.authorid FROM writes AS t1 JOIN paper AS t2 ON t1.paperid = t2.paperid WHERE t2.year = 2015;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what keyphrase does Brian DeRenzi write about that gets most citations ?<CODESPLIT>SELECT DISTINCT t1.keyphrasename , SUM ( t3.numcitedby ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t5 ON t4.authorid = t5.authorid WHERE t5.authorname = "Brian DeRenzi" GROUP BY t1.keyphrasename ORDER BY SUM ( t3.numcitedby ) DESC;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>authors with at least 5 papers<CODESPLIT>SELECT DISTINCT COUNT ( t2.paperid ) , t1.authorid FROM writes AS t1 JOIN paper AS t2 ON t1.paperid = t2.paperid GROUP BY t1.authorid HAVING COUNT ( t2.paperid ) >= 5;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>papers that were not published in the last year<CODESPLIT>SELECT DISTINCT paperid FROM paper WHERE YEAR != 2015;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>When was Michael Stonebraker GIS Database published ?<CODESPLIT>SELECT DISTINCT t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid = t5.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid WHERE t1.authorname = "Michael Stonebraker" AND t5.keyphrasename = "GIS Database";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>In 2010 what journal published an article about Trophic Cascade ?<CODESPLIT>SELECT DISTINCT t3.journalid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.keyphrasename = "Trophic Cascade" AND t3.year = 2010 GROUP BY t3.journalid;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>What is the most popular paper this year in CVPR ?<CODESPLIT>SELECT DISTINCT t3.citedpaperid , COUNT ( t3.citingpaperid ) FROM paper AS t1 JOIN cite AS t3 ON t1.paperid = t3.citedpaperid JOIN venue AS t2 ON t2.venueid = t1.venueid WHERE t1.year = 2016 AND t2.venuename = "CVPR" GROUP BY t3.citedpaperid ORDER BY COUNT ( t3.citingpaperid ) DESC;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>How many citations does luke zettlemoyer have per year<CODESPLIT>SELECT DISTINCT COUNT ( t4.citedpaperid ) , t3.year FROM paper AS t3 JOIN cite AS t4 ON t3.paperid = t4.citedpaperid JOIN writes AS t2 ON t2.paperid = t3.paperid JOIN author AS t1 ON t2.authorid = t1.authorid WHERE t1.authorname = "luke zettlemoyer" GROUP BY t3.year;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>authors working on ImageNet<CODESPLIT>SELECT DISTINCT t2.paperid FROM paperdataset AS t3 JOIN dataset AS t1 ON t3.datasetid = t1.datasetid JOIN paper AS t4 ON t4.paperid = t3.paperid JOIN writes AS t2 ON t2.paperid = t4.paperid WHERE t1.datasetname = "ImageNet" GROUP BY t2.paperid;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>What articles have been published since 2006 about the effects of juicing for cancer patients ?<CODESPLIT>SELECT DISTINCT paperid , title FROM paper WHERE title LIKE "the effects of juicing for cancer patients" AND YEAR > 2006;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Eric C. Kerrigan 's Liquid Automatica paper<CODESPLIT>SELECT DISTINCT t2.paperid FROM paperkeyphrase AS t5 JOIN keyphrase AS t3 ON t5.keyphraseid = t3.keyphraseid JOIN writes AS t4 ON t4.paperid = t5.paperid JOIN paper AS t2 ON t4.paperid = t2.paperid JOIN author AS t1 ON t4.authorid = t1.authorid JOIN venue AS t6 ON t6.venueid = t2.venueid WHERE t1.authorname = "Eric C. Kerrigan" AND t3.keyphrasename = "Liquid" AND t6.venuename = "Automatica";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Where did sergey levine publish his last paper ?<CODESPLIT>SELECT DISTINCT t3.venueid , t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid WHERE t1.authorname = "sergey levine" GROUP BY t3.venueid , t3.year ORDER BY t3.year DESC;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>keyphrases used by dan klein in his emnlp papers<CODESPLIT>SELECT DISTINCT t2.keyphraseid FROM paper AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid = t2.paperid JOIN venue AS t4 ON t4.venueid = t3.venueid JOIN writes AS t5 ON t5.paperid = t3.paperid JOIN author AS t1 ON t5.authorid = t1.authorid WHERE t1.authorname = "dan klein" AND t4.venuename = "emnlp";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Who are the prominent researchers in Neutralizing Antibody in 2012 ?<CODESPLIT>SELECT DISTINCT COUNT ( t4.paperid ) , t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid = t2.keyphraseid JOIN paper AS t4 ON t4.paperid = t1.paperid JOIN writes AS t3 ON t3.paperid = t4.paperid WHERE t2.keyphrasename = "Neutralizing Antibody" AND t4.year = 2012 GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>the papers at eccv in 2014 using ImageNet dataset<CODESPLIT>SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid = t1.datasetid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN venue AS t4 ON t4.venueid = t3.venueid WHERE t1.datasetname = "ImageNet" AND t3.year = 2014 AND t4.venuename = "eccv";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Euclidean Distance papers citing NIPS papers<CODESPLIT>SELECT DISTINCT t5.citingpaperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN cite AS t5 ON t2.paperid = t5.citingpaperid JOIN paper AS t3 ON t3.paperid = t5.citedpaperid JOIN venue AS t4 ON t4.venueid = t3.venueid WHERE t1.keyphrasename = "Euclidean Distance" AND t4.venuename = "NIPS";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>top authors working on ImageNet ?<CODESPLIT>SELECT DISTINCT COUNT ( t4.paperid ) , t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid = t1.datasetid JOIN paper AS t4 ON t4.paperid = t2.paperid JOIN writes AS t3 ON t3.paperid = t4.paperid WHERE t1.datasetname = "ImageNet" GROUP BY t3.paperid ORDER BY COUNT ( t4.paperid ) DESC;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>how many ACL 2012 papers have more than 7 citations ?<CODESPLIT>SELECT DISTINCT ( t1.paperid ) , COUNT ( t3.citingpaperid ) FROM paper AS t1 JOIN cite AS t3 ON t1.paperid = t3.citedpaperid JOIN venue AS t2 ON t2.venueid = t1.venueid WHERE t1.year = 2012 AND t2.venuename = "ACL" GROUP BY t1.paperid HAVING COUNT ( t3.citingpaperid ) > 7;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>What was the topic of best paper in 2012 EMNLP-CoNLL ?<CODESPLIT>SELECT DISTINCT COUNT ( DISTINCT t4.citingpaperid ) , t1.keyphraseid , t2.paperid FROM paper AS t2 JOIN cite AS t4 ON t2.paperid = t4.citedpaperid JOIN paperkeyphrase AS t1 ON t2.paperid = t1.paperid JOIN venue AS t3 ON t3.venueid = t2.venueid WHERE t2.year = 2012 AND t3.venuename = "EMNLP-CoNLL" GROUP BY t2.paperid , t1.keyphraseid ORDER BY COUNT ( DISTINCT t4.citingpaperid ) DESC;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>How many papers has Noah Smith co-authored since 2009 ?<CODESPLIT>SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid WHERE t1.authorname != "Noah Smith" AND t3.year > 2009 AND t2.paperid IN ( SELECT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid WHERE t1.authorname LIKE "Noah Smith" );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Number of ACL papers with more than 2 citations<CODESPLIT>SELECT DISTINCT COUNT ( t3.citingpaperid ) FROM paper AS t1 JOIN cite AS t3 ON t1.paperid = t3.citedpaperid JOIN venue AS t2 ON t2.venueid = t1.venueid WHERE t2.venuename = "ACL" GROUP BY t3.citingpaperid HAVING COUNT ( DISTINCT t3.citedpaperid ) > 2;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>What is the name of Eric C. Kerrigan 's Liquid Automatica paper ?<CODESPLIT>SELECT DISTINCT t2.title FROM paperkeyphrase AS t5 JOIN keyphrase AS t3 ON t5.keyphraseid = t3.keyphraseid JOIN writes AS t4 ON t4.paperid = t5.paperid JOIN paper AS t2 ON t4.paperid = t2.paperid JOIN author AS t1 ON t4.authorid = t1.authorid JOIN venue AS t6 ON t6.venueid = t2.venueid WHERE t1.authorname LIKE "Eric C. Kerrigan" AND t3.keyphrasename = "Liquid" AND t6.venuename = "Automatica";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>How many papers used ImageNet datasets in cvpr ?<CODESPLIT>SELECT DISTINCT COUNT ( t3.paperid ) FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid = t1.datasetid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN venue AS t4 ON t4.venueid = t3.venueid WHERE t1.datasetname = "ImageNet" AND t4.venuename = "cvpr";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>What venues are for Neuroscience ?<CODESPLIT>SELECT DISTINCT venueid FROM venue WHERE venuename = "Neuroscience";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>When was the last time Mary Crainie published a paper ?<CODESPLIT>SELECT DISTINCT MAX ( t3.year ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid WHERE t1.authorname = "Mary Crainie";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>I want the co-authors of papers on Machine Translation Output with Philipp Koehn<CODESPLIT>SELECT DISTINCT t1.authorid FROM paperkeyphrase AS t6 JOIN keyphrase AS t3 ON t6.keyphraseid = t3.keyphraseid JOIN writes AS t4 ON t4.paperid = t6.paperid JOIN writes AS t5 ON t5.paperid = t4.paperid JOIN author AS t1 ON t5.authorid = t1.authorid JOIN author AS t2 ON t4.authorid = t2.authorid WHERE t2.authorname = "Philipp Koehn" AND t3.keyphrasename = "Machine Translation Output";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>How many papers does Samuel Madden publish outside of PVLDB area ?<CODESPLIT>SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM venue AS t4 JOIN paper AS t3 ON t4.venueid = t3.venueid JOIN writes AS t2 ON t2.paperid = t3.paperid JOIN author AS t1 ON t2.authorid = t1.authorid WHERE t1.authorname = "Samuel Madden" AND t4.venuename != "PVLDB";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>which journal did Donald E Knuth publish his last paper ?<CODESPLIT>SELECT DISTINCT t3.journalid , t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid WHERE t1.authorname = "Donald E Knuth" GROUP BY t3.journalid , t3.year ORDER BY t3.year DESC;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>What is the venue of Fracture of acrylic bone cement ?<CODESPLIT>SELECT DISTINCT venueid FROM paper WHERE title = "Fracture of acrylic bone cement";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>How many authors published at sigcse in 2010 ?<CODESPLIT>SELECT DISTINCT COUNT ( t2.paperid ) FROM venue AS t3 JOIN paper AS t2 ON t3.venueid = t2.venueid JOIN writes AS t1 ON t1.paperid = t2.paperid WHERE t2.year = 2010 AND t3.venuename = "sigcse";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>What is the year of publication of " A Switching Architecture For ISDN " ?<CODESPLIT>SELECT DISTINCT title , YEAR FROM paper WHERE title = "A Switching Architecture For ISDN";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what keywords are used by papers at uist<CODESPLIT>SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN venue AS t4 ON t4.venueid = t3.venueid WHERE t4.venuename = "uist";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Give me the papers written by Su-In Lee before 2012 .<CODESPLIT>SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid WHERE t1.authorname = "Su-In Lee" AND t3.year < 2012;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>papers in semantic parsing for each year<CODESPLIT>SELECT DISTINCT COUNT ( t3.paperid ) , t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.keyphrasename = "semantic parsing" GROUP BY t3.year ORDER BY t3.year DESC;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>papers with at least 5 citations<CODESPLIT>SELECT DISTINCT t2.citingpaperid FROM paper AS t1 JOIN cite AS t2 ON t1.paperid = t2.citedpaperid GROUP BY t2.citingpaperid HAVING COUNT ( DISTINCT t2.citedpaperid ) >= 5;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>What is the most cited paper at sigcomm ?<CODESPLIT>SELECT DISTINCT t3.citedpaperid , COUNT ( t3.citingpaperid ) FROM paper AS t1 JOIN cite AS t3 ON t1.paperid = t3.citedpaperid JOIN venue AS t2 ON t2.venueid = t1.venueid WHERE t2.venuename = "sigcomm" GROUP BY t3.citedpaperid ORDER BY COUNT ( t3.citingpaperid ) DESC;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>What is the name of Ranjit Jhala 's Liquid Haskell paper ?<CODESPLIT>SELECT DISTINCT t3.title FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid = t5.keyphraseid JOIN writes AS t4 ON t4.paperid = t2.paperid JOIN paper AS t3 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid WHERE t1.authorname LIKE "Ranjit Jhala" AND t5.keyphrasename = "Liquid Haskell";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>List all the businesses with more than 4.5 stars<CODESPLIT>SELECT name FROM business WHERE rating > 4.5;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>List all businesses with rating 3.5<CODESPLIT>SELECT name FROM business WHERE rating = 3.5;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>List all user ids with name Michelle<CODESPLIT>SELECT user_id FROM USER WHERE name = "Michelle";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Find all states in which there is a Whataburger<CODESPLIT>SELECT state FROM business WHERE name = "Whataburger";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Find all cities in which there is a restaurant called " MGM Grand Buffet "<CODESPLIT>SELECT t1.city FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id WHERE t1.name = "MGM Grand Buffet" AND t2.category_name = "category_category_name0";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Find the cities of businesses rated below 1.5<CODESPLIT>SELECT city FROM business WHERE rating < 1.5;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Find all cities which has a " Taj Mahal " .<CODESPLIT>SELECT city FROM business WHERE name = "Taj Mahal";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>List all the reviews which rated a business less than 1<CODESPLIT>SELECT text FROM review WHERE rating < 1;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>List all the restaurant rated more than 3.5<CODESPLIT>SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id WHERE t1.rating > 3.5 AND t2.category_name = "restaurant";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>find all cities which has a " Taj Mahal " restaurant<CODESPLIT>SELECT t1.city FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id WHERE t1.name = "Taj Mahal" AND t2.category_name = "restaurant";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>list all the reviews by Niloofar<CODESPLIT>SELECT t1.text FROM USER AS t2 JOIN review AS t1 ON t2.user_id = t1.user_id WHERE t2.name = "Niloofar";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>list all the businesses which have a review by Niloofar<CODESPLIT>SELECT t1.name FROM review AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN USER AS t3 ON t3.user_id = t2.user_id WHERE t3.name = "Niloofar";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>list all the businesses which Niloofar rated 5<CODESPLIT>SELECT t1.name FROM review AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN USER AS t3 ON t3.user_id = t2.user_id WHERE t2.rating = 5 AND t3.name = "Niloofar";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>List all the reviews by Michelle for Italian restaurant<CODESPLIT>SELECT t4.text FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN category AS t3 ON t3.business_id = t1.business_id JOIN review AS t4 ON t4.business_id = t1.business_id JOIN USER AS t5 ON t5.user_id = t4.user_id WHERE t2.category_name = "Italian" AND t3.category_name = "category_category_name1" AND t5.name = "Michelle";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>find the number of reviews written for " Cafe Zinho " restaurant in Texas<CODESPLIT>SELECT COUNT ( DISTINCT t3.text ) FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN review AS t3 ON t3.business_id = t1.business_id WHERE t1.name = "Cafe Zinho" AND t1.state = "Texas" AND t2.category_name = "restaurant";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>List all 5 star Italian restaurant<CODESPLIT>SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN category AS t3 ON t3.business_id = t1.business_id WHERE t1.rating = 5 AND t2.category_name = "Italian" AND t3.category_name = "restaurant";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>List all the neighbourhoods with Italian restaurant in Madison<CODESPLIT>SELECT t1.neighbourhood_name FROM category AS t3 JOIN business AS t2 ON t3.business_id = t2.business_id JOIN category AS t4 ON t4.business_id = t2.business_id JOIN neighbourhood AS t1 ON t1.business_id = t2.business_id WHERE t2.city = "Madison" AND t3.category_name = "Italian" AND t4.category_name = "restaurant";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>List all the neighbourhoods with Italian restaurant rated less than 2.5 in Madison<CODESPLIT>SELECT t1.neighbourhood_name FROM category AS t3 JOIN business AS t2 ON t3.business_id = t2.business_id JOIN category AS t4 ON t4.business_id = t2.business_id JOIN neighbourhood AS t1 ON t1.business_id = t2.business_id WHERE t2.city = "Madison" AND t2.rating < 2.5 AND t3.category_name = "Italian" AND t4.category_name = "restaurant";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>find all the restaurant in Pennsylvania<CODESPLIT>SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id WHERE t1.state = "Pennsylvania" AND t2.category_name = "restaurant";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Find all the reviews for all Pet Groomers with more than 100 reviews<CODESPLIT>SELECT t3.text FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN review AS t3 ON t3.business_id = t1.business_id WHERE t1.review_count > 100 AND t2.category_name = "Pet Groomers";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>What are all the breweries in " Los Angeles " ?<CODESPLIT>SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id WHERE t1.city = "Los Angeles" AND t2.category_name = "breweries";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Find all users who reviewed restaurant " Mesa Grill "<CODESPLIT>SELECT t4.name FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN review AS t3 ON t3.business_id = t1.business_id JOIN USER AS t4 ON t4.user_id = t3.user_id WHERE t1.name = "Mesa Grill" AND t2.category_name = "restaurant";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>List the addresses of all Walmart in " Los Angeles "<CODESPLIT>SELECT full_address FROM business WHERE city = "Los Angeles" AND name = "Walmart";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Find all restaurant reviewed by Patrick in " Dallas "<CODESPLIT>SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN review AS t3 ON t3.business_id = t1.business_id JOIN USER AS t4 ON t4.user_id = t3.user_id WHERE t1.city = "Dallas" AND t2.category_name = "restaurant" AND t4.name = "Patrick";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Find all Bars reviewed by Patrick<CODESPLIT>SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN review AS t3 ON t3.business_id = t1.business_id JOIN USER AS t4 ON t4.user_id = t3.user_id WHERE t2.category_name = "Bars" AND t4.name = "Patrick";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Find all Bars reviewed by Patrick with at least 3 stars<CODESPLIT>SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN review AS t3 ON t3.business_id = t1.business_id JOIN USER AS t4 ON t4.user_id = t3.user_id WHERE t1.rating >= 3 AND t2.category_name = "Bars" AND t4.name = "Patrick";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Find all users who have written tips for " Barrio Cafe " in 2015<CODESPLIT>SELECT t3.name FROM tip AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN USER AS t3 ON t3.user_id = t2.user_id WHERE t1.name = "Barrio Cafe" AND t2.year = 2015;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Find all businesses in Texas with a rating below 2<CODESPLIT>SELECT name FROM business WHERE rating < 2 AND state = "Texas";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Find all restaurant Seafood in Los Angeles<CODESPLIT>SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN category AS t3 ON t3.business_id = t1.business_id WHERE t1.city = "Los Angeles" AND t2.category_name = "Seafood" AND t3.category_name = "restaurant";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Find all reviews by Patrick with a rating above 4<CODESPLIT>SELECT t1.text FROM USER AS t2 JOIN review AS t1 ON t2.user_id = t1.user_id WHERE t1.rating > 4 AND t2.name = "Patrick";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Find all Apple Store in " Los Angeles "<CODESPLIT>SELECT business_id FROM business WHERE city = "Los Angeles" AND name = "Apple Store";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Find all Dallas restaurant with a rating above 4.5<CODESPLIT>SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id WHERE t1.city = "Dallas" AND t1.rating > 4.5 AND t2.category_name = "restaurant";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>What neighbourhood is restaurant " Flat Top Grill " in ?<CODESPLIT>SELECT t1.neighbourhood_name FROM category AS t3 JOIN business AS t2 ON t3.business_id = t2.business_id JOIN neighbourhood AS t1 ON t1.business_id = t2.business_id WHERE t2.name = "Flat Top Grill" AND t3.category_name = "category_category_name0";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Find all tips about " Vintner Grill " that received more than 9 likes<CODESPLIT>SELECT t2.text FROM tip AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id WHERE t1.name = "Vintner Grill" AND t2.likes > 9;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Find all reviews about " Kabob Palace " in year 2014<CODESPLIT>SELECT t2.text FROM review AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id WHERE t1.name = "Kabob Palace" AND t2.year = 2014;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Find all users who have written tips about businesses in Dallas<CODESPLIT>SELECT t3.name FROM tip AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN USER AS t3 ON t3.user_id = t2.user_id WHERE t1.city = "Dallas";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Find all cities in Texas in which there is a restaurant called " MGM Grand Buffet "<CODESPLIT>SELECT t1.city FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id WHERE t1.name = "MGM Grand Buffet" AND t1.state = "Texas" AND t2.category_name = "restaurant";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Find the users who have given tips on Pet Groomers<CODESPLIT>SELECT t4.name FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN tip AS t3 ON t3.business_id = t1.business_id JOIN USER AS t4 ON t4.user_id = t3.user_id WHERE t2.category_name = "Pet Groomers";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Find all tips for " Cafe Zinho " in Texas .<CODESPLIT>SELECT t2.text FROM tip AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id WHERE t1.name = "Cafe Zinho" AND t1.state = "Texas";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>List all users who reviewed businesses that are restaurant .<CODESPLIT>SELECT t4.name FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN review AS t3 ON t3.business_id = t1.business_id JOIN USER AS t4 ON t4.user_id = t3.user_id WHERE t2.category_name = "restaurant";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>List all tips for " Cafe Zinho " in Pennsylvania in 2010 .<CODESPLIT>SELECT t2.text FROM tip AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id WHERE t1.name = "Cafe Zinho" AND t1.state = "Pennsylvania" AND t2.year = 2010;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>List all users who reviewed businesses that are restaurant in 2010 .<CODESPLIT>SELECT t4.name FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN review AS t3 ON t3.business_id = t1.business_id JOIN USER AS t4 ON t4.user_id = t3.user_id WHERE t2.category_name = "restaurant" AND t3.year = 2010;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Find all the tips from a user who has written a review in 2012<CODESPLIT>SELECT t2.text FROM USER AS t3 JOIN review AS t1 ON t3.user_id = t1.user_id JOIN tip AS t2 ON t3.user_id = t2.user_id WHERE t1.year = 2012;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Find all reviews for businesses rated 2.5<CODESPLIT>SELECT t2.text FROM review AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id WHERE t1.rating = 2.5;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>find the number of escape games in Madison<CODESPLIT>SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id WHERE t1.city = "Madison" AND t2.category_name = "escape games";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>find the number of restaurant rated more than 3.5<CODESPLIT>SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id WHERE t1.rating > 3.5 AND t2.category_name = "restaurant";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>find the total checkins in Moroccan restaurant in " Los Angeles "<CODESPLIT>SELECT SUM ( t4.count ) FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN category AS t3 ON t3.business_id = t1.business_id JOIN checkin AS t4 ON t4.business_id = t1.business_id WHERE t1.city = "Los Angeles" AND t2.category_name = "restaurant" AND t3.category_name = "Moroccan";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>find the total checkins in Moroccan restaurant in " Los Angeles " on Friday<CODESPLIT>SELECT SUM ( t4.count ) FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN category AS t3 ON t3.business_id = t1.business_id JOIN checkin AS t4 ON t4.business_id = t1.business_id WHERE t1.city = "Los Angeles" AND t2.category_name = "Moroccan" AND t3.category_name = "restaurant" AND t4.day = "Friday";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>find the total checkins in Moroccan restaurant in " Los Angeles " per day<CODESPLIT>SELECT t4.day , SUM ( t4.count ) FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN category AS t3 ON t3.business_id = t1.business_id JOIN checkin AS t4 ON t4.business_id = t1.business_id WHERE t1.city = "Los Angeles" AND t2.category_name = "Moroccan" AND t3.category_name = "restaurant" GROUP BY t4.day;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>find the total checkins in Italian Delis in each state on Sunday<CODESPLIT>SELECT t1.state , SUM ( t4.count ) FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN category AS t3 ON t3.business_id = t1.business_id JOIN checkin AS t4 ON t4.business_id = t1.business_id WHERE t2.category_name = "Italian" AND t3.category_name = "Delis" AND t4.day = "Sunday" GROUP BY t1.state;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>How many reviews has Niloofar written in 2015<CODESPLIT>SELECT COUNT ( DISTINCT t1.text ) FROM USER AS t2 JOIN review AS t1 ON t2.user_id = t1.user_id WHERE t1.year = 2015 AND t2.name = "Niloofar";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what is the average rating given in Michelle reviews<CODESPLIT>SELECT AVG ( t1.rating ) FROM USER AS t2 JOIN review AS t1 ON t2.user_id = t1.user_id WHERE t2.name = "Michelle";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>What is the number of checkins for " Cafe Zinho " on Friday<CODESPLIT>SELECT t2.count FROM checkin AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id WHERE t1.name = "Cafe Zinho" AND t2.day = "Friday";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>how many users reviewed " Sushi Too " in Pittsburgh<CODESPLIT>SELECT COUNT ( DISTINCT t3.name ) FROM review AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN USER AS t3 ON t3.user_id = t2.user_id WHERE t1.city = "Pittsburgh" AND t1.name = "Sushi Too";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>What is the number of restaurant in Pittsburgh rated 4.5<CODESPLIT>SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id WHERE t1.city = "Pittsburgh" AND t1.rating = 4.5 AND t2.category_name = "restaurant";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>How many tips have been written in 2015<CODESPLIT>SELECT COUNT ( DISTINCT text ) FROM tip WHERE YEAR = 2015;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>What is the total likes on tips from Niloofar<CODESPLIT>SELECT SUM ( t1.likes ) FROM USER AS t2 JOIN tip AS t1 ON t2.user_id = t1.user_id WHERE t2.name = "Niloofar";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>What is the total likes on tips about " Cafe Zinho "<CODESPLIT>SELECT SUM ( t2.likes ) FROM tip AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id WHERE t1.name = "Cafe Zinho";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>What is the total likes on tips from Niloofar about " Cafe Zinho "<CODESPLIT>SELECT SUM ( t2.likes ) FROM tip AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN USER AS t3 ON t3.user_id = t2.user_id WHERE t1.name = "Cafe Zinho" AND t3.name = "Niloofar";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>How many tips has Michelle written in 2010<CODESPLIT>SELECT COUNT ( DISTINCT t1.text ) FROM USER AS t2 JOIN tip AS t1 ON t2.user_id = t1.user_id WHERE t1.year = 2010 AND t2.name = "Michelle";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>How many tips has Michelle written in April<CODESPLIT>SELECT COUNT ( DISTINCT t1.text ) FROM USER AS t2 JOIN tip AS t1 ON t2.user_id = t1.user_id WHERE t1.month = "April" AND t2.name = "Michelle";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what is the number of restaurant in Texas<CODESPLIT>SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id WHERE t1.state = "Texas" AND t2.category_name = "restaurant";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>How many Bars in " Dallas " have a rating above 3.5 ?<CODESPLIT>SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id WHERE t1.city = "Dallas" AND t1.rating > 3.5 AND t2.category_name = "Bars";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>How many people reviewed the restaurant " Texas de Brazil " in Dallas Texas ?<CODESPLIT>SELECT COUNT ( DISTINCT t4.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN review AS t3 ON t3.business_id = t1.business_id JOIN USER AS t4 ON t4.user_id = t3.user_id WHERE t1.city = "Dallas" AND t1.name = "Texas de Brazil" AND t1.state = "Texas" AND t2.category_name = "restaurant";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>How many people reviewed " Bistro Di Napoli " in 2015 ?<CODESPLIT>SELECT COUNT ( DISTINCT t3.name ) FROM review AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN USER AS t3 ON t3.user_id = t2.user_id WHERE t1.name = "Bistro Di Napoli" AND t2.year = 2015;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>How many restaurant are there in the Hazelwood district of Dallas ?<CODESPLIT>SELECT COUNT ( DISTINCT t1.name ) FROM category AS t3 JOIN business AS t1 ON t3.business_id = t1.business_id JOIN neighbourhood AS t2 ON t2.business_id = t1.business_id WHERE t1.city = "Dallas" AND t3.category_name = "restaurant" AND t2.neighbourhood_name = "Hazelwood";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>How many Starbucks are there in Dallas Texas ?<CODESPLIT>SELECT COUNT ( DISTINCT business_id ) FROM business WHERE city = "Dallas" AND name = "Starbucks" AND state = "Texas";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>How many reviews does " Acacia Cafe " have ?<CODESPLIT>SELECT review_count FROM business WHERE name = "Acacia Cafe";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Find the average number of checkins in restaurant " Barrio Cafe " per day<CODESPLIT>SELECT AVG ( t3.count ) , t3.day FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN checkin AS t3 ON t3.business_id = t1.business_id WHERE t1.name = "Barrio Cafe" AND t2.category_name = "restaurant" GROUP BY t3.day;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>How many businesses are there in the " Stone Meadows " neighbourhood in Madison ?<CODESPLIT>SELECT COUNT ( DISTINCT t1.name ) FROM neighbourhood AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id WHERE t1.city = "Madison" AND t2.neighbourhood_name = "Stone Meadows";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>How many reviews has Adrienne written ?<CODESPLIT>SELECT COUNT ( DISTINCT t1.text ) FROM USER AS t2 JOIN review AS t1 ON t2.user_id = t1.user_id WHERE t2.name = "Adrienne";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>How many reviews has Michelle written in March 2014 ?<CODESPLIT>SELECT COUNT ( DISTINCT t1.text ) FROM USER AS t2 JOIN review AS t1 ON t2.user_id = t1.user_id WHERE t1.month = "March" AND t1.year = 2014 AND t2.name = "Michelle";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>How many businesses has Michelle reviewed in 2010 ?<CODESPLIT>SELECT COUNT ( DISTINCT t1.name ) FROM review AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN USER AS t3 ON t3.user_id = t2.user_id WHERE t2.year = 2010 AND t3.name = "Michelle";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>How many businesses in " San Diego " has Christine reviewed in 2010 ?<CODESPLIT>SELECT COUNT ( DISTINCT t1.name ) FROM review AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN USER AS t3 ON t3.user_id = t2.user_id WHERE t1.city = "San Diego" AND t2.year = 2010 AND t3.name = "Christine";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>How many Target are there in " Los Angeles " ?<CODESPLIT>SELECT COUNT ( DISTINCT business_id ) FROM business WHERE city = "Los Angeles" AND name = "Target";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>How many users have reviewed Irish Pub in Dallas ?<CODESPLIT>SELECT COUNT ( DISTINCT t4.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN review AS t3 ON t3.business_id = t1.business_id JOIN USER AS t4 ON t4.user_id = t3.user_id WHERE t1.city = "Dallas" AND t2.category_name = "Irish Pub";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>What is the average rating of reviews written in year 2014 ?<CODESPLIT>SELECT AVG ( rating ) FROM review WHERE YEAR = 2014;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>How many people reviewed restaurant " Vintner Grill " in 2010 ?<CODESPLIT>SELECT COUNT ( DISTINCT t4.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN review AS t3 ON t3.business_id = t1.business_id JOIN USER AS t4 ON t4.user_id = t3.user_id WHERE t1.name = "Vintner Grill" AND t2.category_name = "category_category_name0" AND t3.year = 2010;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Find the number of reviews on businesses located in " South Summerlin " neighbourhood<CODESPLIT>SELECT COUNT ( DISTINCT t3.text ) FROM neighbourhood AS t1 JOIN business AS t2 ON t1.business_id = t2.business_id JOIN review AS t3 ON t3.business_id = t2.business_id WHERE t1.neighbourhood_name = "South Summerlin";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Find the number of users called Michelle<CODESPLIT>SELECT COUNT ( DISTINCT name ) FROM USER WHERE name = "Michelle";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Return me the number of businesses that are restaurant .<CODESPLIT>SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id WHERE t2.category_name = "restaurant";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Return me the number of cities that has " Panda Express " .<CODESPLIT>SELECT COUNT ( DISTINCT city ) FROM business WHERE name = "Panda Express";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Return me the number of tips that are written by Michelle .<CODESPLIT>SELECT COUNT ( DISTINCT t1.text ) FROM USER AS t2 JOIN tip AS t1 ON t2.user_id = t1.user_id WHERE t2.name = "Michelle";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Find the total checkins in " Brighton Heights " neighbourhood<CODESPLIT>SELECT SUM ( t3.count ) FROM checkin AS t3 JOIN business AS t1 ON t3.business_id = t1.business_id JOIN neighbourhood AS t2 ON t2.business_id = t1.business_id WHERE t2.neighbourhood_name = "Brighton Heights";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Find the total number of reviews written in March<CODESPLIT>SELECT COUNT ( DISTINCT text ) FROM review WHERE MONTH = "March";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Find the number of tips written in each month<CODESPLIT>SELECT COUNT ( DISTINCT text ) , MONTH FROM tip GROUP BY MONTH;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>How many neighbourhoods have a business with rating 5 in Madison ?<CODESPLIT>SELECT COUNT ( DISTINCT t1.neighbourhood_name ) FROM neighbourhood AS t1 JOIN business AS t2 ON t1.business_id = t2.business_id WHERE t2.city = "Madison" AND t2.rating = 5;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Give me all the Moroccan restaurant in Texas<CODESPLIT>SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN category AS t3 ON t3.business_id = t1.business_id WHERE t1.state = "Texas" AND t2.category_name = "Moroccan" AND t3.category_name = "restaurant";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>which business has the most number of checkins<CODESPLIT>SELECT t1.name FROM checkin AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id GROUP BY t1.name ORDER BY SUM ( t2.count ) DESC LIMIT 1;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>which neighbourhood has the most number of businesses in Madison<CODESPLIT>SELECT t1.neighbourhood_name FROM neighbourhood AS t1 JOIN business AS t2 ON t1.business_id = t2.business_id WHERE t2.city = "Madison" GROUP BY t1.neighbourhood_name ORDER BY COUNT ( DISTINCT t2.name ) DESC LIMIT 1;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Find all Mexican restaurant in Dallas with at least 3.5 stars<CODESPLIT>SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN category AS t3 ON t3.business_id = t1.business_id WHERE t1.city = "Dallas" AND t1.rating > 3.5 AND t2.category_name = "Mexican" AND t3.category_name = "restaurant";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Find all restaurant with Valet Service in Dallas Texas<CODESPLIT>SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN category AS t3 ON t3.business_id = t1.business_id WHERE t1.city = "Dallas" AND t1.state = "Texas" AND t2.category_name = "Valet Service" AND t3.category_name = "restaurant";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Find all Italian restaurant in the Meadowood neighbourhood of Madison<CODESPLIT>SELECT t1.name FROM category AS t3 JOIN business AS t1 ON t3.business_id = t1.business_id JOIN category AS t4 ON t4.business_id = t1.business_id JOIN neighbourhood AS t2 ON t2.business_id = t1.business_id WHERE t1.city = "Madison" AND t3.category_name = "Italian" AND t4.category_name = "restaurant" AND t2.neighbourhood_name = "Meadowood";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Find all Bars in " Los Angeles " with at least 30 reviews and average rating above 3 stars<CODESPLIT>SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id WHERE t1.city = "Los Angeles" AND t1.rating > 3 AND t1.review_count > 30 AND t2.category_name = "Bars";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>How many Egyptian restaurant are there in Edinburgh ?<CODESPLIT>SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN category AS t3 ON t3.business_id = t1.business_id WHERE t1.city = "Edinburgh" AND t2.category_name = "restaurant" AND t3.category_name = "Egyptian";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Find users whose average review rating is below 3<CODESPLIT>SELECT t2.name FROM USER AS t2 JOIN review AS t1 ON t2.user_id = t1.user_id GROUP BY t2.name HAVING AVG ( t1.rating ) < 3;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Find the business with the most number of reviews in April<CODESPLIT>SELECT t1.name FROM review AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id WHERE t2.month = "April" GROUP BY t1.name ORDER BY COUNT ( DISTINCT t2.text ) DESC LIMIT 1;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Find the business which has the most number of categories<CODESPLIT>SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id GROUP BY t1.name ORDER BY COUNT ( DISTINCT t2.category_name ) DESC LIMIT 1;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the homepage of PVLDB .<CODESPLIT>SELECT homepage FROM journal WHERE name = "PVLDB";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the homepage of " H. V. Jagadish " .<CODESPLIT>SELECT homepage FROM author WHERE name = "H. V. Jagadish";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the abstract of " Making database systems usable " .<CODESPLIT>SELECT abstract FROM publication WHERE title = "Making database systems usable";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the year of " Making database systems usable "<CODESPLIT>SELECT YEAR FROM publication WHERE title = "Making database systems usable";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the papers after 2000 .<CODESPLIT>SELECT title FROM publication WHERE YEAR > 2000;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the homepage of the VLDB conference .<CODESPLIT>SELECT homepage FROM conference WHERE name = "VLDB";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me all the keywords .<CODESPLIT>SELECT keyword FROM keyword;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me all the organizations .<CODESPLIT>SELECT name FROM organization;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me all the organizations in " North America " .<CODESPLIT>SELECT name FROM organization WHERE continent = "North America";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the homepage of " University of Michigan " .<CODESPLIT>SELECT homepage FROM organization WHERE name = "University of Michigan";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the number of references of " Making database systems usable " .<CODESPLIT>SELECT reference_num FROM publication WHERE title = "Making database systems usable";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the number of citations of " Making database systems usable " .<CODESPLIT>SELECT citation_num FROM publication WHERE title = "Making database systems usable";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the paper with more than 200 citations .<CODESPLIT>SELECT title FROM publication WHERE citation_num > 200;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the authors who have papers in PVLDB 2010 .<CODESPLIT>SELECT t1.name FROM publication AS t4 JOIN journal AS t2 ON t4.jid = t2.jid JOIN writes AS t3 ON t3.pid = t4.pid JOIN author AS t1 ON t3.aid = t1.aid WHERE t2.name = "PVLDB" AND t4.year = 2010;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the authors who have papers in PVLDB after 2010 .<CODESPLIT>SELECT t1.name FROM publication AS t4 JOIN journal AS t2 ON t4.jid = t2.jid JOIN writes AS t3 ON t3.pid = t4.pid JOIN author AS t1 ON t3.aid = t1.aid WHERE t2.name = "PVLDB" AND t4.year > 2010;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the authors who have papers in VLDB conference in 2002 .<CODESPLIT>SELECT t1.name FROM publication AS t4 JOIN conference AS t2 ON t4.cid = t2.cid JOIN writes AS t3 ON t3.pid = t4.pid JOIN author AS t1 ON t3.aid = t1.aid WHERE t2.name = "VLDB" AND t4.year = 2002;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the authors who have papers in VLDB conference before 2002 .<CODESPLIT>SELECT t1.name FROM publication AS t4 JOIN conference AS t2 ON t4.cid = t2.cid JOIN writes AS t3 ON t3.pid = t4.pid JOIN author AS t1 ON t3.aid = t1.aid WHERE t2.name = "VLDB" AND t4.year < 2002;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the authors who have papers in VLDB conference before 2002 after 1995 .<CODESPLIT>SELECT t1.name FROM publication AS t4 JOIN conference AS t2 ON t4.cid = t2.cid JOIN writes AS t3 ON t3.pid = t4.pid JOIN author AS t1 ON t3.aid = t1.aid WHERE t2.name = "VLDB" AND t4.year < 2002 AND t4.year > 1995;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the area of PVLDB .<CODESPLIT>SELECT t3.name FROM DOMAIN AS t3 JOIN domain_journal AS t1 ON t3.did = t1.did JOIN journal AS t2 ON t2.jid = t1.jid WHERE t2.name = "PVLDB";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the authors who have papers in PVLDB .<CODESPLIT>SELECT t1.name FROM publication AS t4 JOIN journal AS t2 ON t4.jid = t2.jid JOIN writes AS t3 ON t3.pid = t4.pid JOIN author AS t1 ON t3.aid = t1.aid WHERE t2.name = "PVLDB";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the organization " H. V. Jagadish " is in .<CODESPLIT>SELECT t2.name FROM organization AS t2 JOIN author AS t1 ON t2.oid = t1.oid WHERE t1.name = "H. V. Jagadish";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the conferences, which have papers by " H. V. Jagadish " .<CODESPLIT>SELECT t2.name FROM publication AS t4 JOIN conference AS t2 ON t4.cid = t2.cid JOIN writes AS t3 ON t3.pid = t4.pid JOIN author AS t1 ON t3.aid = t1.aid WHERE t1.name = "H. V. Jagadish";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the journals, which have papers by " H. V. Jagadish " .<CODESPLIT>SELECT t2.name FROM publication AS t4 JOIN journal AS t2 ON t4.jid = t2.jid JOIN writes AS t3 ON t3.pid = t4.pid JOIN author AS t1 ON t3.aid = t1.aid WHERE t1.name = "H. V. Jagadish";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the domain where " H. V. Jagadish " is focused .<CODESPLIT>SELECT t2.name FROM domain_author AS t3 JOIN author AS t1 ON t3.aid = t1.aid JOIN DOMAIN AS t2 ON t2.did = t3.did WHERE t1.name = "H. V. Jagadish";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the authors of " Making database systems usable " .<CODESPLIT>SELECT t1.name FROM writes AS t2 JOIN author AS t1 ON t2.aid = t1.aid JOIN publication AS t3 ON t2.pid = t3.pid WHERE t3.title = "Making database systems usable";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the conference, which published " Making database systems usable " .<CODESPLIT>SELECT t1.name FROM publication AS t2 JOIN conference AS t1 ON t2.cid = t1.cid WHERE t2.title = "Making database systems usable";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the papers by " H. V. Jagadish " .<CODESPLIT>SELECT t3.title FROM writes AS t2 JOIN author AS t1 ON t2.aid = t1.aid JOIN publication AS t3 ON t2.pid = t3.pid WHERE t1.name = "H. V. Jagadish";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the papers on VLDB conference .<CODESPLIT>SELECT t2.title FROM publication AS t2 JOIN conference AS t1 ON t2.cid = t1.cid WHERE t1.name = "VLDB";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the papers on PVLDB .<CODESPLIT>SELECT t2.title FROM publication AS t2 JOIN journal AS t1 ON t2.jid = t1.jid WHERE t1.name = "PVLDB";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the papers on PVLDB after 2000 .<CODESPLIT>SELECT t2.title FROM publication AS t2 JOIN journal AS t1 ON t2.jid = t1.jid WHERE t1.name = "PVLDB" AND t2.year > 2000;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the papers on VLDB conference after 2000 .<CODESPLIT>SELECT t2.title FROM publication AS t2 JOIN conference AS t1 ON t2.cid = t1.cid WHERE t1.name = "VLDB" AND t2.year > 2000;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the papers by " H. V. Jagadish " on PVLDB .<CODESPLIT>SELECT t4.title FROM publication AS t4 JOIN journal AS t2 ON t4.jid = t2.jid JOIN writes AS t3 ON t3.pid = t4.pid JOIN author AS t1 ON t3.aid = t1.aid WHERE t1.name = "H. V. Jagadish" AND t2.name = "PVLDB";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the papers by " H. V. Jagadish " on VLDB conference .<CODESPLIT>SELECT t4.title FROM publication AS t4 JOIN conference AS t2 ON t4.cid = t2.cid JOIN writes AS t3 ON t3.pid = t4.pid JOIN author AS t1 ON t3.aid = t1.aid WHERE t1.name = "H. V. Jagadish" AND t2.name = "VLDB";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the papers by " H. V. Jagadish " after 2000 .<CODESPLIT>SELECT t3.title FROM writes AS t2 JOIN author AS t1 ON t2.aid = t1.aid JOIN publication AS t3 ON t2.pid = t3.pid WHERE t1.name = "H. V. Jagadish" AND t3.year > 2000;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the papers by " H. V. Jagadish " on PVLDB after 2000 .<CODESPLIT>SELECT t4.title FROM publication AS t4 JOIN journal AS t2 ON t4.jid = t2.jid JOIN writes AS t3 ON t3.pid = t4.pid JOIN author AS t1 ON t3.aid = t1.aid WHERE t1.name = "H. V. Jagadish" AND t2.name = "PVLDB" AND t4.year > 2000;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the papers by " H. V. Jagadish " on VLDB conference after 2000 .<CODESPLIT>SELECT t4.title FROM publication AS t4 JOIN conference AS t2 ON t4.cid = t2.cid JOIN writes AS t3 ON t3.pid = t4.pid JOIN author AS t1 ON t3.aid = t1.aid WHERE t1.name = "H. V. Jagadish" AND t2.name = "VLDB" AND t4.year > 2000;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the area of the VLDB conference .<CODESPLIT>SELECT t2.name FROM domain_conference AS t3 JOIN conference AS t1 ON t3.cid = t1.cid JOIN DOMAIN AS t2 ON t2.did = t3.did WHERE t1.name = "VLDB";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the authors who have papers in the VLDB conference .<CODESPLIT>SELECT t1.name FROM publication AS t4 JOIN conference AS t2 ON t4.cid = t2.cid JOIN writes AS t3 ON t3.pid = t4.pid JOIN author AS t1 ON t3.aid = t1.aid WHERE t2.name = "VLDB";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me all the keywords in Databases area .<CODESPLIT>SELECT t1.keyword FROM DOMAIN AS t3 JOIN domain_keyword AS t2 ON t3.did = t2.did JOIN keyword AS t1 ON t1.kid = t2.kid WHERE t3.name = "Databases";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me all the papers, which contain the keyword " Natural Language " .<CODESPLIT>SELECT t3.title FROM publication_keyword AS t2 JOIN keyword AS t1 ON t2.kid = t1.kid JOIN publication AS t3 ON t3.pid = t2.pid WHERE t1.keyword = "Natural Language";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the keywords of " Making database systems usable " .<CODESPLIT>SELECT t1.keyword FROM publication_keyword AS t3 JOIN keyword AS t1 ON t3.kid = t1.kid JOIN publication AS t2 ON t2.pid = t3.pid WHERE t2.title = "Making database systems usable";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the keywords related to " H. V. Jagadish " .<CODESPLIT>SELECT t1.keyword FROM publication_keyword AS t5 JOIN keyword AS t1 ON t5.kid = t1.kid JOIN publication AS t3 ON t3.pid = t5.pid JOIN writes AS t4 ON t4.pid = t3.pid JOIN author AS t2 ON t4.aid = t2.aid WHERE t2.name = "H. V. Jagadish";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the keywords in VLDB conference .<CODESPLIT>SELECT t1.keyword FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid = t1.kid JOIN publication AS t3 ON t3.pid = t4.pid JOIN conference AS t2 ON t3.cid = t2.cid WHERE t2.name = "VLDB";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the keywords in PVLDB .<CODESPLIT>SELECT t1.keyword FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid = t1.kid JOIN publication AS t2 ON t2.pid = t4.pid JOIN journal AS t3 ON t2.jid = t3.jid WHERE t3.name = "PVLDB";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the keywords in the papers of " University of Michigan " .<CODESPLIT>SELECT t1.keyword FROM organization AS t6 JOIN author AS t2 ON t6.oid = t2.oid JOIN writes AS t4 ON t4.aid = t2.aid JOIN publication AS t5 ON t4.pid = t5.pid JOIN publication_keyword AS t3 ON t5.pid = t3.pid JOIN keyword AS t1 ON t3.kid = t1.kid WHERE t6.name = "University of Michigan";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the papers of " H. V. Jagadish " containing keyword " User Study " .<CODESPLIT>SELECT t5.title FROM publication_keyword AS t3 JOIN keyword AS t1 ON t3.kid = t1.kid JOIN publication AS t5 ON t5.pid = t3.pid JOIN writes AS t4 ON t4.pid = t5.pid JOIN author AS t2 ON t4.aid = t2.aid WHERE t2.name = "H. V. Jagadish" AND t1.keyword = "User Study";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the papers in PVLDB containing keyword " Keyword search " .<CODESPLIT>SELECT t4.title FROM publication_keyword AS t2 JOIN keyword AS t1 ON t2.kid = t1.kid JOIN publication AS t4 ON t4.pid = t2.pid JOIN journal AS t3 ON t4.jid = t3.jid WHERE t3.name = "PVLDB" AND t1.keyword = "Keyword search";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the papers in VLDB conference containing keyword " Information Retrieval " .<CODESPLIT>SELECT t4.title FROM publication_keyword AS t3 JOIN keyword AS t1 ON t3.kid = t1.kid JOIN publication AS t4 ON t4.pid = t3.pid JOIN conference AS t2 ON t4.cid = t2.cid WHERE t2.name = "VLDB" AND t1.keyword = "Information Retrieval";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the authors who have papers containing keyword " Relational Database " .<CODESPLIT>SELECT t2.name FROM publication_keyword AS t5 JOIN keyword AS t1 ON t5.kid = t1.kid JOIN publication AS t3 ON t3.pid = t5.pid JOIN writes AS t4 ON t4.pid = t3.pid JOIN author AS t2 ON t4.aid = t2.aid WHERE t1.keyword = "Relational Database";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me all the organizations in Databases area .<CODESPLIT>SELECT t2.name FROM domain_author AS t4 JOIN author AS t1 ON t4.aid = t1.aid JOIN DOMAIN AS t3 ON t3.did = t4.did JOIN organization AS t2 ON t2.oid = t1.oid WHERE t3.name = "Databases";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me all the organizations in Databases area located in " North America " .<CODESPLIT>SELECT t2.name FROM domain_author AS t4 JOIN author AS t1 ON t4.aid = t1.aid JOIN DOMAIN AS t3 ON t3.did = t4.did JOIN organization AS t2 ON t2.oid = t1.oid WHERE t3.name = "Databases" AND t2.continent = "North America";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me all the researchers in " University of Michigan " .<CODESPLIT>SELECT t1.name FROM organization AS t2 JOIN author AS t1 ON t2.oid = t1.oid WHERE t2.name = "University of Michigan";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me all the researchers in Databases area in " University of Michigan " .<CODESPLIT>SELECT t1.name FROM domain_author AS t4 JOIN author AS t1 ON t4.aid = t1.aid JOIN DOMAIN AS t3 ON t3.did = t4.did JOIN organization AS t2 ON t2.oid = t1.oid WHERE t3.name = "Databases" AND t2.name = "University of Michigan";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me all the papers in " University of Michigan " .<CODESPLIT>SELECT t4.title FROM organization AS t2 JOIN author AS t1 ON t2.oid = t1.oid JOIN writes AS t3 ON t3.aid = t1.aid JOIN publication AS t4 ON t3.pid = t4.pid WHERE t2.name = "University of Michigan";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me all the papers after 2000 in " University of Michigan " .<CODESPLIT>SELECT t4.title FROM organization AS t2 JOIN author AS t1 ON t2.oid = t1.oid JOIN writes AS t3 ON t3.aid = t1.aid JOIN publication AS t4 ON t3.pid = t4.pid WHERE t2.name = "University of Michigan" AND t4.year > 2000;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me all the papers in VLDB conference in " University of Michigan " .<CODESPLIT>SELECT t5.title FROM organization AS t3 JOIN author AS t1 ON t3.oid = t1.oid JOIN writes AS t4 ON t4.aid = t1.aid JOIN publication AS t5 ON t4.pid = t5.pid JOIN conference AS t2 ON t5.cid = t2.cid WHERE t2.name = "VLDB" AND t3.name = "University of Michigan";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me all the papers in PVLDB in " University of Michigan " .<CODESPLIT>SELECT t5.title FROM organization AS t2 JOIN author AS t1 ON t2.oid = t1.oid JOIN writes AS t4 ON t4.aid = t1.aid JOIN publication AS t5 ON t4.pid = t5.pid JOIN journal AS t3 ON t5.jid = t3.jid WHERE t3.name = "PVLDB" AND t2.name = "University of Michigan";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me all the papers in PVLDB after 2000 in " University of Michigan " .<CODESPLIT>SELECT t5.title FROM organization AS t2 JOIN author AS t1 ON t2.oid = t1.oid JOIN writes AS t4 ON t4.aid = t1.aid JOIN publication AS t5 ON t4.pid = t5.pid JOIN journal AS t3 ON t5.jid = t3.jid WHERE t3.name = "PVLDB" AND t2.name = "University of Michigan" AND t5.year > 2000;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the paper in Databases area with more than 200 citations .<CODESPLIT>SELECT t3.title FROM DOMAIN AS t2 JOIN domain_publication AS t1 ON t2.did = t1.did JOIN publication AS t3 ON t3.pid = t1.pid WHERE t2.name = "Databases" AND t3.citation_num > 200;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the paper in PVLDB with more than 200 citations .<CODESPLIT>SELECT t2.title FROM publication AS t2 JOIN journal AS t1 ON t2.jid = t1.jid WHERE t1.name = "PVLDB" AND t2.citation_num > 200;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the paper in VLDB conference with more than 200 citations .<CODESPLIT>SELECT t2.title FROM publication AS t2 JOIN conference AS t1 ON t2.cid = t1.cid WHERE t1.name = "VLDB" AND t2.citation_num > 200;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the paper by " H. V. Jagadish " with more than 200 citations .<CODESPLIT>SELECT t3.title FROM writes AS t2 JOIN author AS t1 ON t2.aid = t1.aid JOIN publication AS t3 ON t2.pid = t3.pid WHERE t1.name = "H. V. Jagadish" AND t3.citation_num > 200;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the papers by " H. V. Jagadish " on PVLDB with more than 200 citations .<CODESPLIT>SELECT t4.title FROM publication AS t4 JOIN journal AS t2 ON t4.jid = t2.jid JOIN writes AS t3 ON t3.pid = t4.pid JOIN author AS t1 ON t3.aid = t1.aid WHERE t1.name = "H. V. Jagadish" AND t2.name = "PVLDB" AND t4.citation_num > 200;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the papers by " H. V. Jagadish " on VLDB conference with more than 200 citations .<CODESPLIT>SELECT t4.title FROM publication AS t4 JOIN conference AS t2 ON t4.cid = t2.cid JOIN writes AS t3 ON t3.pid = t4.pid JOIN author AS t1 ON t3.aid = t1.aid WHERE t1.name = "H. V. Jagadish" AND t2.name = "VLDB" AND t4.citation_num > 200;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the paper after 2000 with more than 200 citations .<CODESPLIT>SELECT title FROM publication WHERE citation_num > 200 AND YEAR > 2000;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the paper after 2000 in Databases area with more than 200 citations .<CODESPLIT>SELECT t3.title FROM DOMAIN AS t2 JOIN domain_publication AS t1 ON t2.did = t1.did JOIN publication AS t3 ON t3.pid = t1.pid WHERE t2.name = "Databases" AND t3.citation_num > 200 AND t3.year > 2000;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the paper after 2000 in PVLDB with more than 200 citations .<CODESPLIT>SELECT t2.title FROM publication AS t2 JOIN journal AS t1 ON t2.jid = t1.jid WHERE t1.name = "PVLDB" AND t2.citation_num > 200 AND t2.year > 2000;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the paper after 2000 in VLDB conference with more than 200 citations .<CODESPLIT>SELECT t2.title FROM publication AS t2 JOIN conference AS t1 ON t2.cid = t1.cid WHERE t1.name = "VLDB" AND t2.citation_num > 200 AND t2.year > 2000;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the number of conferences which have papers by " H. V. Jagadish " .<CODESPLIT>SELECT COUNT ( DISTINCT t2.name ) FROM publication AS t4 JOIN conference AS t2 ON t4.cid = t2.cid JOIN writes AS t3 ON t3.pid = t4.pid JOIN author AS t1 ON t3.aid = t1.aid WHERE t1.name = "H. V. Jagadish";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the number of journals which have papers by " H. V. Jagadish " .<CODESPLIT>SELECT COUNT ( DISTINCT t2.name ) FROM publication AS t4 JOIN journal AS t2 ON t4.jid = t2.jid JOIN writes AS t3 ON t3.pid = t4.pid JOIN author AS t1 ON t3.aid = t1.aid WHERE t1.name = "H. V. Jagadish";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the number of papers written by " H. V. Jagadish " in each year .<CODESPLIT>SELECT COUNT ( DISTINCT t3.title ) , t3.year FROM writes AS t2 JOIN author AS t1 ON t2.aid = t1.aid JOIN publication AS t3 ON t2.pid = t3.pid WHERE t1.name = "H. V. Jagadish" GROUP BY t3.year;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the number of authors of " Making database systems usable " .<CODESPLIT>SELECT COUNT ( DISTINCT t1.name ) FROM writes AS t2 JOIN author AS t1 ON t2.aid = t1.aid JOIN publication AS t3 ON t2.pid = t3.pid WHERE t3.title = "Making database systems usable";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the number of citations of " Making database systems usable " in each year .<CODESPLIT>SELECT YEAR , SUM ( citation_num ) FROM publication WHERE title = "Making database systems usable" GROUP BY YEAR;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the number of citations of " Making database systems usable " before 2010 .<CODESPLIT>SELECT COUNT ( DISTINCT t2.title ) FROM publication AS t3 JOIN cite AS t1 ON t3.pid = t1.cited JOIN publication AS t2 ON t2.pid = t1.citing WHERE t3.title = "Making database systems usable" AND t2.year < 2010;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the number of papers by " H. V. Jagadish " .<CODESPLIT>SELECT COUNT ( DISTINCT t3.title ) FROM writes AS t2 JOIN author AS t1 ON t2.aid = t1.aid JOIN publication AS t3 ON t2.pid = t3.pid WHERE t1.name = "H. V. Jagadish";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the number of papers on VLDB conference .<CODESPLIT>SELECT COUNT ( DISTINCT t2.title ) FROM publication AS t2 JOIN conference AS t1 ON t2.cid = t1.cid WHERE t1.name = "VLDB";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the number of papers on PVLDB .<CODESPLIT>SELECT COUNT ( DISTINCT t2.title ) FROM publication AS t2 JOIN journal AS t1 ON t2.jid = t1.jid WHERE t1.name = "PVLDB";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the number of papers after 2000 .<CODESPLIT>SELECT COUNT ( DISTINCT title ) FROM publication WHERE YEAR > 2000;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the number of papers on PVLDB after 2000 .<CODESPLIT>SELECT COUNT ( DISTINCT t2.title ) FROM publication AS t2 JOIN journal AS t1 ON t2.jid = t1.jid WHERE t1.name = "PVLDB" AND t2.year > 2000;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the number of papers on VLDB conference after 2000 .<CODESPLIT>SELECT COUNT ( DISTINCT t2.title ) FROM publication AS t2 JOIN conference AS t1 ON t2.cid = t1.cid WHERE t1.name = "VLDB" AND t2.year > 2000;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the number of papers by " H. V. Jagadish " on PVLDB .<CODESPLIT>SELECT COUNT ( DISTINCT t4.title ) FROM publication AS t4 JOIN journal AS t2 ON t4.jid = t2.jid JOIN writes AS t3 ON t3.pid = t4.pid JOIN author AS t1 ON t3.aid = t1.aid WHERE t1.name = "H. V. Jagadish" AND t2.name = "PVLDB";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the number of papers by " H. V. Jagadish " on VLDB conference .<CODESPLIT>SELECT COUNT ( DISTINCT t4.title ) FROM publication AS t4 JOIN conference AS t2 ON t4.cid = t2.cid JOIN writes AS t3 ON t3.pid = t4.pid JOIN author AS t1 ON t3.aid = t1.aid WHERE t1.name = "H. V. Jagadish" AND t2.name = "VLDB";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the number of papers by " H. V. Jagadish " after 2000 .<CODESPLIT>SELECT COUNT ( DISTINCT t3.title ) FROM writes AS t2 JOIN author AS t1 ON t2.aid = t1.aid JOIN publication AS t3 ON t2.pid = t3.pid WHERE t1.name = "H. V. Jagadish" AND t3.year > 2000;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the number of papers by " H. V. Jagadish " on PVLDB after 2000 .<CODESPLIT>SELECT COUNT ( DISTINCT t4.title ) FROM publication AS t4 JOIN journal AS t2 ON t4.jid = t2.jid JOIN writes AS t3 ON t3.pid = t4.pid JOIN author AS t1 ON t3.aid = t1.aid WHERE t1.name = "H. V. Jagadish" AND t2.name = "PVLDB" AND t4.year > 2000;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the number of papers by " H. V. Jagadish " on VLDB conference after 2000 .<CODESPLIT>SELECT COUNT ( DISTINCT t4.title ) FROM publication AS t4 JOIN conference AS t2 ON t4.cid = t2.cid JOIN writes AS t3 ON t3.pid = t4.pid JOIN author AS t1 ON t3.aid = t1.aid WHERE t1.name = "H. V. Jagadish" AND t2.name = "VLDB" AND t4.year > 2000;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the number of keywords .<CODESPLIT>SELECT COUNT ( DISTINCT keyword ) FROM keyword;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the number of keywords in Databases area .<CODESPLIT>SELECT COUNT ( DISTINCT t1.keyword ) FROM DOMAIN AS t3 JOIN domain_keyword AS t2 ON t3.did = t2.did JOIN keyword AS t1 ON t1.kid = t2.kid WHERE t3.name = "Databases";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the number of papers which contain the keyword " Natural Language " .<CODESPLIT>SELECT COUNT ( DISTINCT t3.title ) FROM publication_keyword AS t2 JOIN keyword AS t1 ON t2.kid = t1.kid JOIN publication AS t3 ON t3.pid = t2.pid WHERE t1.keyword = "Natural Language";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the number of the keywords of " Making database systems usable " .<CODESPLIT>SELECT COUNT ( DISTINCT t1.keyword ) FROM publication_keyword AS t3 JOIN keyword AS t1 ON t3.kid = t1.kid JOIN publication AS t2 ON t2.pid = t3.pid WHERE t2.title = "Making database systems usable";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the number of the keywords related to " H. V. Jagadish " .<CODESPLIT>SELECT COUNT ( DISTINCT t1.keyword ) FROM publication_keyword AS t5 JOIN keyword AS t1 ON t5.kid = t1.kid JOIN publication AS t3 ON t3.pid = t5.pid JOIN writes AS t4 ON t4.pid = t3.pid JOIN author AS t2 ON t4.aid = t2.aid WHERE t2.name = "H. V. Jagadish";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the number of keywords in VLDB conference .<CODESPLIT>SELECT COUNT ( DISTINCT t1.keyword ) FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid = t1.kid JOIN publication AS t3 ON t3.pid = t4.pid JOIN conference AS t2 ON t3.cid = t2.cid WHERE t2.name = "VLDB";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the number of keywords in PVLDB .<CODESPLIT>SELECT COUNT ( DISTINCT t1.keyword ) FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid = t1.kid JOIN publication AS t2 ON t2.pid = t4.pid JOIN journal AS t3 ON t2.jid = t3.jid WHERE t3.name = "PVLDB";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the number of keywords in the papers of " University of Michigan " .<CODESPLIT>SELECT COUNT ( DISTINCT t1.keyword ) FROM organization AS t6 JOIN author AS t2 ON t6.oid = t2.oid JOIN writes AS t4 ON t4.aid = t2.aid JOIN publication AS t5 ON t4.pid = t5.pid JOIN publication_keyword AS t3 ON t5.pid = t3.pid JOIN keyword AS t1 ON t3.kid = t1.kid WHERE t6.name = "University of Michigan";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the number of the papers of " H. V. Jagadish " containing keyword " User Study " .<CODESPLIT>SELECT COUNT ( DISTINCT t5.title ) FROM publication_keyword AS t3 JOIN keyword AS t1 ON t3.kid = t1.kid JOIN publication AS t5 ON t5.pid = t3.pid JOIN writes AS t4 ON t4.pid = t5.pid JOIN author AS t2 ON t4.aid = t2.aid WHERE t2.name = "H. V. Jagadish" AND t1.keyword = "User Study";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the number of papers in PVLDB containing keyword " Keyword search " .<CODESPLIT>SELECT COUNT ( DISTINCT t4.title ) FROM publication_keyword AS t2 JOIN keyword AS t1 ON t2.kid = t1.kid JOIN publication AS t4 ON t4.pid = t2.pid JOIN journal AS t3 ON t4.jid = t3.jid WHERE t3.name = "PVLDB" AND t1.keyword = "Keyword search";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the number of papers in VLDB conference containing keyword " Information Retrieval " .<CODESPLIT>SELECT COUNT ( DISTINCT t4.title ) FROM publication_keyword AS t3 JOIN keyword AS t1 ON t3.kid = t1.kid JOIN publication AS t4 ON t4.pid = t3.pid JOIN conference AS t2 ON t4.cid = t2.cid WHERE t2.name = "VLDB" AND t1.keyword = "Information Retrieval";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the number of authors who have papers containing keyword " Relational Database " .<CODESPLIT>SELECT COUNT ( DISTINCT t2.name ) FROM publication_keyword AS t5 JOIN keyword AS t1 ON t5.kid = t1.kid JOIN publication AS t3 ON t3.pid = t5.pid JOIN writes AS t4 ON t4.pid = t3.pid JOIN author AS t2 ON t4.aid = t2.aid WHERE t1.keyword = "Relational Database";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the total citations of the papers containing keyword " Natural Language "<CODESPLIT>SELECT SUM ( t3.citation_num ) FROM publication_keyword AS t2 JOIN keyword AS t1 ON t2.kid = t1.kid JOIN publication AS t3 ON t3.pid = t2.pid WHERE t1.keyword = "Natural Language";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the number of the organizations .<CODESPLIT>SELECT COUNT ( DISTINCT name ) FROM organization;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the number of the organizations in " North America " .<CODESPLIT>SELECT COUNT ( DISTINCT name ) FROM organization WHERE continent = "North America";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the number of organizations in Databases area .<CODESPLIT>SELECT COUNT ( DISTINCT t2.name ) FROM domain_author AS t4 JOIN author AS t1 ON t4.aid = t1.aid JOIN DOMAIN AS t3 ON t3.did = t4.did JOIN organization AS t2 ON t2.oid = t1.oid WHERE t3.name = "Databases";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the number of organizations in Databases area located in " North America " .<CODESPLIT>SELECT COUNT ( DISTINCT t2.name ) FROM domain_author AS t4 JOIN author AS t1 ON t4.aid = t1.aid JOIN DOMAIN AS t3 ON t3.did = t4.did JOIN organization AS t2 ON t2.oid = t1.oid WHERE t3.name = "Databases" AND t2.continent = "North America";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the number of papers in " University of Michigan " .<CODESPLIT>SELECT COUNT ( DISTINCT t4.title ) FROM organization AS t2 JOIN author AS t1 ON t2.oid = t1.oid JOIN writes AS t3 ON t3.aid = t1.aid JOIN publication AS t4 ON t3.pid = t4.pid WHERE t2.name = "University of Michigan";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the number of papers in " University of Michigan " in Databases area .<CODESPLIT>SELECT COUNT ( DISTINCT t4.title ) FROM domain_author AS t6 JOIN author AS t1 ON t6.aid = t1.aid JOIN DOMAIN AS t3 ON t3.did = t6.did JOIN domain_publication AS t2 ON t3.did = t2.did JOIN organization AS t5 ON t5.oid = t1.oid JOIN publication AS t4 ON t4.pid = t2.pid WHERE t3.name = "Databases" AND t5.name = "University of Michigan";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the number of papers after 2000 in " University of Michigan " .<CODESPLIT>SELECT COUNT ( DISTINCT t4.title ) FROM organization AS t2 JOIN author AS t1 ON t2.oid = t1.oid JOIN writes AS t3 ON t3.aid = t1.aid JOIN publication AS t4 ON t3.pid = t4.pid WHERE t2.name = "University of Michigan" AND t4.year > 2000;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the number of papers in VLDB conference in " University of Michigan " .<CODESPLIT>SELECT COUNT ( DISTINCT t5.title ) FROM organization AS t3 JOIN author AS t1 ON t3.oid = t1.oid JOIN writes AS t4 ON t4.aid = t1.aid JOIN publication AS t5 ON t4.pid = t5.pid JOIN conference AS t2 ON t5.cid = t2.cid WHERE t2.name = "VLDB" AND t3.name = "University of Michigan";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the number of papers in PVLDB in " University of Michigan " .<CODESPLIT>SELECT COUNT ( DISTINCT t5.title ) FROM organization AS t2 JOIN author AS t1 ON t2.oid = t1.oid JOIN writes AS t4 ON t4.aid = t1.aid JOIN publication AS t5 ON t4.pid = t5.pid JOIN journal AS t3 ON t5.jid = t3.jid WHERE t3.name = "PVLDB" AND t2.name = "University of Michigan";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the number of papers in PVLDB after 2000 in " University of Michigan " .<CODESPLIT>SELECT COUNT ( DISTINCT t5.title ) FROM organization AS t2 JOIN author AS t1 ON t2.oid = t1.oid JOIN writes AS t4 ON t4.aid = t1.aid JOIN publication AS t5 ON t4.pid = t5.pid JOIN journal AS t3 ON t5.jid = t3.jid WHERE t3.name = "PVLDB" AND t2.name = "University of Michigan" AND t5.year > 2000;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the total citations of the papers in " University of Michigan " .<CODESPLIT>SELECT SUM ( t4.citation_num ) FROM organization AS t2 JOIN author AS t1 ON t2.oid = t1.oid JOIN writes AS t3 ON t3.aid = t1.aid JOIN publication AS t4 ON t3.pid = t4.pid WHERE t2.name = "University of Michigan";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the number of researchers in " University of Michigan " .<CODESPLIT>SELECT COUNT ( DISTINCT t1.name ) FROM organization AS t2 JOIN author AS t1 ON t2.oid = t1.oid WHERE t2.name = "University of Michigan";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the number of researchers in Databases area in " University of Michigan " .<CODESPLIT>SELECT COUNT ( DISTINCT t1.name ) FROM domain_author AS t4 JOIN author AS t1 ON t4.aid = t1.aid JOIN DOMAIN AS t3 ON t3.did = t4.did JOIN organization AS t2 ON t2.oid = t1.oid WHERE t3.name = "Databases" AND t2.name = "University of Michigan";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the number of authors who have papers in PVLDB .<CODESPLIT>SELECT COUNT ( DISTINCT t1.name ) FROM publication AS t4 JOIN journal AS t2 ON t4.jid = t2.jid JOIN writes AS t3 ON t3.pid = t4.pid JOIN author AS t1 ON t3.aid = t1.aid WHERE t2.name = "PVLDB";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the number of authors who have papers in the VLDB conference .<CODESPLIT>SELECT COUNT ( DISTINCT t1.name ) FROM publication AS t4 JOIN conference AS t2 ON t4.cid = t2.cid JOIN writes AS t3 ON t3.pid = t4.pid JOIN author AS t1 ON t3.aid = t1.aid WHERE t2.name = "VLDB";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the number of papers published on PVLDB before 2000 .<CODESPLIT>SELECT COUNT ( DISTINCT t2.title ) FROM publication AS t2 JOIN journal AS t1 ON t2.jid = t1.jid WHERE t1.name = "PVLDB" AND t2.year < 2000;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the number of papers published in the VLDB conference before 2000 .<CODESPLIT>SELECT COUNT ( DISTINCT t2.title ) FROM publication AS t2 JOIN conference AS t1 ON t2.cid = t1.cid WHERE t1.name = "VLDB" AND t2.year < 2000;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the total citations of all the papers in PVLDB .<CODESPLIT>SELECT SUM ( t2.citation_num ) FROM publication AS t2 JOIN journal AS t1 ON t2.jid = t1.jid WHERE t1.name = "PVLDB";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the citations of each paper in PVLDB .<CODESPLIT>SELECT t2.citation_num FROM publication AS t2 JOIN journal AS t1 ON t2.jid = t1.jid WHERE t1.name = "PVLDB";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the total citations of papers in PVLDB in 2005 .<CODESPLIT>SELECT SUM ( t2.citation_num ) FROM publication AS t2 JOIN journal AS t1 ON t2.jid = t1.jid WHERE t1.name = "PVLDB" AND t2.year = 2005;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the total citations of papers in PVLDB before 2005 .<CODESPLIT>SELECT SUM ( t2.citation_num ) FROM publication AS t2 JOIN journal AS t1 ON t2.jid = t1.jid WHERE t1.name = "PVLDB" AND t2.year < 2005;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the total citations of papers in PVLDB in each year .<CODESPLIT>SELECT t2.year , SUM ( t2.citation_num ) FROM publication AS t2 JOIN journal AS t1 ON t2.jid = t1.jid WHERE t1.name = "PVLDB" GROUP BY t2.year;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the number of papers published in PVLDB in each year .<CODESPLIT>SELECT COUNT ( DISTINCT t2.title ) , t2.year FROM publication AS t2 JOIN journal AS t1 ON t2.jid = t1.jid WHERE t1.name = "PVLDB" GROUP BY t2.year;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the total citations of all the papers in the VLDB conference .<CODESPLIT>SELECT SUM ( t2.citation_num ) FROM publication AS t2 JOIN conference AS t1 ON t2.cid = t1.cid WHERE t1.name = "VLDB";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the citations of each paper in the VLDB conference .<CODESPLIT>SELECT t2.citation_num FROM publication AS t2 JOIN conference AS t1 ON t2.cid = t1.cid WHERE t1.name = "VLDB";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the total citations of papers in the VLDB conference in 2005 .<CODESPLIT>SELECT SUM ( t2.citation_num ) FROM publication AS t2 JOIN conference AS t1 ON t2.cid = t1.cid WHERE t1.name = "VLDB" AND t2.year = 2005;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the total citations of papers in the VLDB conference before 2005 .<CODESPLIT>SELECT SUM ( t2.citation_num ) FROM publication AS t2 JOIN conference AS t1 ON t2.cid = t1.cid WHERE t1.name = "VLDB" AND t2.year < 2005;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the total citations of papers in the VLDB conference in each year .<CODESPLIT>SELECT t2.year , SUM ( t2.citation_num ) FROM publication AS t2 JOIN conference AS t1 ON t2.cid = t1.cid WHERE t1.name = "VLDB" GROUP BY t2.year;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the number of papers published in the VLDB conference in each year .<CODESPLIT>SELECT COUNT ( DISTINCT t2.title ) , t2.year FROM publication AS t2 JOIN conference AS t1 ON t2.cid = t1.cid WHERE t1.name = "VLDB" GROUP BY t2.year;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the authors who have cooperated both with " H. V. Jagadish " and " Divesh Srivastava " .<CODESPLIT>SELECT t2.name FROM writes AS t4 JOIN author AS t2 ON t4.aid = t2.aid JOIN publication AS t7 ON t4.pid = t7.pid JOIN writes AS t5 ON t5.pid = t7.pid JOIN writes AS t6 ON t6.pid = t7.pid JOIN author AS t1 ON t5.aid = t1.aid JOIN author AS t3 ON t6.aid = t3.aid WHERE t1.name = "H. V. Jagadish" AND t3.name = "Divesh Srivastava";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the authors who have cooperated with " H. V. Jagadish " after 2000 .<CODESPLIT>SELECT t2.name FROM writes AS t3 JOIN author AS t2 ON t3.aid = t2.aid JOIN publication AS t5 ON t3.pid = t5.pid JOIN writes AS t4 ON t4.pid = t5.pid JOIN author AS t1 ON t4.aid = t1.aid WHERE t1.name = "H. V. Jagadish" AND t5.year > 2000;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the papers written by " H. V. Jagadish " and " Divesh Srivastava " .<CODESPLIT>SELECT t5.title FROM writes AS t3 JOIN author AS t2 ON t3.aid = t2.aid JOIN publication AS t5 ON t3.pid = t5.pid JOIN writes AS t4 ON t4.pid = t5.pid JOIN author AS t1 ON t4.aid = t1.aid WHERE t2.name = "H. V. Jagadish" AND t1.name = "Divesh Srivastava";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the papers written by " H. V. Jagadish " and " Yunyao Li " after 2005 .<CODESPLIT>SELECT t5.title FROM writes AS t3 JOIN author AS t2 ON t3.aid = t2.aid JOIN publication AS t5 ON t3.pid = t5.pid JOIN writes AS t4 ON t4.pid = t5.pid JOIN author AS t1 ON t4.aid = t1.aid WHERE t2.name = "H. V. Jagadish" AND t1.name = "Yunyao Li" AND t5.year > 2005;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the papers written by " H. V. Jagadish " and " Yunyao Li " on PVLDB .<CODESPLIT>SELECT t6.title FROM publication AS t6 JOIN journal AS t4 ON t6.jid = t4.jid JOIN writes AS t3 ON t3.pid = t6.pid JOIN writes AS t5 ON t5.pid = t6.pid JOIN author AS t1 ON t5.aid = t1.aid JOIN author AS t2 ON t3.aid = t2.aid WHERE t2.name = "H. V. Jagadish" AND t1.name = "Yunyao Li" AND t4.name = "PVLDB";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the papers written by " H. V. Jagadish " and " Yunyao Li " on PVLDB after 2005 .<CODESPLIT>SELECT t6.title FROM publication AS t6 JOIN journal AS t4 ON t6.jid = t4.jid JOIN writes AS t3 ON t3.pid = t6.pid JOIN writes AS t5 ON t5.pid = t6.pid JOIN author AS t1 ON t5.aid = t1.aid JOIN author AS t2 ON t3.aid = t2.aid WHERE t2.name = "H. V. Jagadish" AND t1.name = "Yunyao Li" AND t4.name = "PVLDB" AND t6.year > 2005;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the authors who have cooperated with " H. V. Jagadish " .<CODESPLIT>SELECT t2.name FROM writes AS t3 JOIN author AS t2 ON t3.aid = t2.aid JOIN publication AS t5 ON t3.pid = t5.pid JOIN writes AS t4 ON t4.pid = t5.pid JOIN author AS t1 ON t4.aid = t1.aid WHERE t1.name = "H. V. Jagadish";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the papers written by " H. V. Jagadish " and " Divesh Srivastava " before 2000 .<CODESPLIT>SELECT t5.title FROM writes AS t3 JOIN author AS t2 ON t3.aid = t2.aid JOIN publication AS t5 ON t3.pid = t5.pid JOIN writes AS t4 ON t4.pid = t5.pid JOIN author AS t1 ON t4.aid = t1.aid WHERE t2.name = "H. V. Jagadish" AND t1.name = "Divesh Srivastava" AND t5.year < 2000;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the authors who have cited the papers by " H. V. Jagadish " .<CODESPLIT>SELECT t2.name FROM publication AS t7 JOIN cite AS t5 ON t7.pid = t5.citing JOIN publication AS t6 ON t6.pid = t5.cited JOIN writes AS t3 ON t3.pid = t7.pid JOIN writes AS t4 ON t4.pid = t6.pid JOIN author AS t2 ON t3.aid = t2.aid JOIN author AS t1 ON t4.aid = t1.aid WHERE t1.name = "H. V. Jagadish";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the number of papers written by " H. V. Jagadish " and " Divesh Srivastava " .<CODESPLIT>SELECT COUNT ( DISTINCT t5.title ) FROM writes AS t3 JOIN author AS t2 ON t3.aid = t2.aid JOIN publication AS t5 ON t3.pid = t5.pid JOIN writes AS t4 ON t4.pid = t5.pid JOIN author AS t1 ON t4.aid = t1.aid WHERE t2.name = "H. V. Jagadish" AND t1.name = "Divesh Srivastava";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the number of papers written by " H. V. Jagadish " and " Divesh Srivastava " before 2000 .<CODESPLIT>SELECT COUNT ( DISTINCT t5.title ) FROM writes AS t3 JOIN author AS t2 ON t3.aid = t2.aid JOIN publication AS t5 ON t3.pid = t5.pid JOIN writes AS t4 ON t4.pid = t5.pid JOIN author AS t1 ON t4.aid = t1.aid WHERE t2.name = "H. V. Jagadish" AND t1.name = "Divesh Srivastava" AND t5.year < 2000;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the number of papers written by " H. V. Jagadish " , " Yunyao Li " , and " Cong Yu " .<CODESPLIT>SELECT COUNT ( DISTINCT t7.title ) FROM writes AS t4 JOIN author AS t2 ON t4.aid = t2.aid JOIN publication AS t7 ON t4.pid = t7.pid JOIN writes AS t5 ON t5.pid = t7.pid JOIN writes AS t6 ON t6.pid = t7.pid JOIN author AS t1 ON t5.aid = t1.aid JOIN author AS t3 ON t6.aid = t3.aid WHERE t2.name = "Cong Yu" AND t1.name = "H. V. Jagadish" AND t3.name = "Yunyao Li";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the number of authors who have cooperated with " H. V. Jagadish " .<CODESPLIT>SELECT COUNT ( DISTINCT t2.name ) FROM writes AS t3 JOIN author AS t2 ON t3.aid = t2.aid JOIN publication AS t5 ON t3.pid = t5.pid JOIN writes AS t4 ON t4.pid = t5.pid JOIN author AS t1 ON t4.aid = t1.aid WHERE t1.name = "H. V. Jagadish";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the number of authors who have cited the papers by " H. V. Jagadish " .<CODESPLIT>SELECT COUNT ( DISTINCT t2.name ) FROM publication AS t7 JOIN cite AS t5 ON t7.pid = t5.citing JOIN publication AS t6 ON t6.pid = t5.cited JOIN writes AS t3 ON t3.pid = t7.pid JOIN writes AS t4 ON t4.pid = t6.pid JOIN author AS t2 ON t3.aid = t2.aid JOIN author AS t1 ON t4.aid = t1.aid WHERE t1.name = "H. V. Jagadish";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the papers written by " H. V. Jagadish " and " Divesh Srivastava " with more than 200 citations .<CODESPLIT>SELECT t5.title FROM writes AS t3 JOIN author AS t2 ON t3.aid = t2.aid JOIN publication AS t5 ON t3.pid = t5.pid JOIN writes AS t4 ON t4.pid = t5.pid JOIN author AS t1 ON t4.aid = t1.aid WHERE t2.name = "H. V. Jagadish" AND t1.name = "Divesh Srivastava" AND t5.citation_num > 200;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the author who has the most number of papers containing keyword " Relational Database " .<CODESPLIT>SELECT t2.name FROM publication_keyword AS t5 JOIN keyword AS t1 ON t5.kid = t1.kid JOIN publication AS t3 ON t3.pid = t5.pid JOIN writes AS t4 ON t4.pid = t3.pid JOIN author AS t2 ON t4.aid = t2.aid WHERE t1.keyword = "Relational Database" GROUP BY t2.name ORDER BY COUNT ( DISTINCT t3.title ) DESC LIMIT 1;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the conference that has the most number of papers containing keyword " Relational Database " .<CODESPLIT>SELECT t2.name FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid = t1.kid JOIN publication AS t3 ON t3.pid = t4.pid JOIN conference AS t2 ON t3.cid = t2.cid WHERE t1.keyword = "Relational Database" GROUP BY t2.name ORDER BY COUNT ( DISTINCT t3.title ) DESC LIMIT 1;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the journal that has the most number of papers containing keyword " Relational Database " .<CODESPLIT>SELECT t3.name FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid = t1.kid JOIN publication AS t2 ON t2.pid = t4.pid JOIN journal AS t3 ON t2.jid = t3.jid WHERE t1.keyword = "Relational Database" GROUP BY t3.name ORDER BY COUNT ( DISTINCT t2.title ) DESC LIMIT 1;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the keyword, which have been contained by the most number of papers in VLDB conference .<CODESPLIT>SELECT t1.keyword FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid = t1.kid JOIN publication AS t3 ON t3.pid = t4.pid JOIN conference AS t2 ON t3.cid = t2.cid WHERE t2.name = "VLDB" GROUP BY t1.keyword ORDER BY COUNT ( DISTINCT t3.title ) DESC LIMIT 1;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the keyword, which have been contained by the most number of papers in PVLDB .<CODESPLIT>SELECT t1.keyword FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid = t1.kid JOIN publication AS t2 ON t2.pid = t4.pid JOIN journal AS t3 ON t2.jid = t3.jid WHERE t3.name = "PVLDB" GROUP BY t1.keyword ORDER BY COUNT ( DISTINCT t2.title ) DESC LIMIT 1;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the keyword, which have been contained by the most number of papers by " H. V. Jagadish " .<CODESPLIT>SELECT t1.keyword FROM publication_keyword AS t5 JOIN keyword AS t1 ON t5.kid = t1.kid JOIN publication AS t3 ON t3.pid = t5.pid JOIN writes AS t4 ON t4.pid = t3.pid JOIN author AS t2 ON t4.aid = t2.aid WHERE t2.name = "H. V. Jagadish" GROUP BY t1.keyword ORDER BY COUNT ( DISTINCT t3.title ) DESC LIMIT 1;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the author in the " University of Michigan " whose papers have the most total citations .<CODESPLIT>SELECT t1.name FROM organization AS t2 JOIN author AS t1 ON t2.oid = t1.oid JOIN writes AS t3 ON t3.aid = t1.aid JOIN publication AS t4 ON t3.pid = t4.pid WHERE t2.name = "University of Michigan" GROUP BY t1.name ORDER BY SUM ( t4.citation_num ) DESC LIMIT 1;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the author in the " University of Michigan " whose papers in Databases area have the most total citations .<CODESPLIT>SELECT t1.name FROM DOMAIN AS t4 JOIN domain_publication AS t2 ON t4.did = t2.did JOIN publication AS t5 ON t5.pid = t2.pid JOIN writes AS t3 ON t3.pid = t5.pid JOIN author AS t1 ON t3.aid = t1.aid JOIN organization AS t6 ON t6.oid = t1.oid WHERE t4.name = "Databases" AND t6.name = "University of Michigan" GROUP BY t1.name ORDER BY SUM ( t5.citation_num ) DESC LIMIT 1;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the papers written by " H. V. Jagadish " and " Divesh Srivastava " with the most number of citations .<CODESPLIT>SELECT t5.title FROM writes AS t3 JOIN author AS t2 ON t3.aid = t2.aid JOIN publication AS t5 ON t3.pid = t5.pid JOIN writes AS t4 ON t4.pid = t5.pid JOIN author AS t1 ON t4.aid = t1.aid WHERE t2.name = "Divesh Srivastava" AND t1.name = "H. V. Jagadish" ORDER BY t5.citation_num DESC LIMIT 1;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the conferences, which have more than 10 papers by " H. V. Jagadish " .<CODESPLIT>SELECT t2.name FROM publication AS t4 JOIN conference AS t2 ON t4.cid = t2.cid JOIN writes AS t3 ON t3.pid = t4.pid JOIN author AS t1 ON t3.aid = t1.aid WHERE t1.name = "H. V. Jagadish" GROUP BY t2.name HAVING COUNT ( DISTINCT t4.title ) > 10;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the conference, which have the most number of papers by " H. V. Jagadish " .<CODESPLIT>SELECT t2.name FROM publication AS t4 JOIN conference AS t2 ON t4.cid = t2.cid JOIN writes AS t3 ON t3.pid = t4.pid JOIN author AS t1 ON t3.aid = t1.aid WHERE t1.name = "H. V. Jagadish" GROUP BY t2.name ORDER BY COUNT ( DISTINCT t4.title ) DESC LIMIT 1;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the journals, which have more than 10 papers by " H. V. Jagadish " .<CODESPLIT>SELECT t2.name FROM publication AS t4 JOIN journal AS t2 ON t4.jid = t2.jid JOIN writes AS t3 ON t3.pid = t4.pid JOIN author AS t1 ON t3.aid = t1.aid WHERE t1.name = "H. V. Jagadish" GROUP BY t2.name HAVING COUNT ( DISTINCT t4.title ) > 10;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the journal, which have the most number of papers by " H. V. Jagadish " .<CODESPLIT>SELECT t2.name FROM publication AS t4 JOIN journal AS t2 ON t4.jid = t2.jid JOIN writes AS t3 ON t3.pid = t4.pid JOIN author AS t1 ON t3.aid = t1.aid WHERE t1.name = "H. V. Jagadish" GROUP BY t2.name ORDER BY COUNT ( DISTINCT t4.title ) DESC LIMIT 1;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the paper with the most citations .<CODESPLIT>SELECT title FROM publication ORDER BY citation_num DESC LIMIT 1;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the paper in Databases area with the most citations .<CODESPLIT>SELECT t3.title FROM DOMAIN AS t2 JOIN domain_publication AS t1 ON t2.did = t1.did JOIN publication AS t3 ON t3.pid = t1.pid WHERE t2.name = "Databases" ORDER BY t3.citation_num DESC LIMIT 1;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the paper in PVLDB with the most citations .<CODESPLIT>SELECT t2.title FROM publication AS t2 JOIN journal AS t1 ON t2.jid = t1.jid WHERE t1.name = "PVLDB" ORDER BY t2.citation_num DESC LIMIT 1;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the paper in VLDB conference with the most citations .<CODESPLIT>SELECT t2.title FROM publication AS t2 JOIN conference AS t1 ON t2.cid = t1.cid WHERE t1.name = "VLDB" ORDER BY t2.citation_num DESC LIMIT 1;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the paper by " H. V. Jagadish " with the most citations .<CODESPLIT>SELECT t3.title FROM writes AS t2 JOIN author AS t1 ON t2.aid = t1.aid JOIN publication AS t3 ON t2.pid = t3.pid WHERE t1.name = "H. V. Jagadish" ORDER BY t3.citation_num DESC LIMIT 1;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the paper after 2000 with the most citations .<CODESPLIT>SELECT title FROM publication WHERE YEAR > 2000 ORDER BY citation_num DESC LIMIT 1;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the paper after 2000 in Databases area with the most citations .<CODESPLIT>SELECT t3.title FROM DOMAIN AS t2 JOIN domain_publication AS t1 ON t2.did = t1.did JOIN publication AS t3 ON t3.pid = t1.pid WHERE t2.name = "Databases" AND t3.year > 2000 ORDER BY t3.citation_num DESC LIMIT 1;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the paper after 2000 in PVLDB with the most citations .<CODESPLIT>SELECT t2.title FROM publication AS t2 JOIN journal AS t1 ON t2.jid = t1.jid WHERE t1.name = "PVLDB" AND t2.year > 2000 ORDER BY t2.citation_num DESC LIMIT 1;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the paper after 2000 in VLDB conference with the most citations .<CODESPLIT>SELECT t2.title FROM publication AS t2 JOIN conference AS t1 ON t2.cid = t1.cid WHERE t1.name = "VLDB" AND t2.year > 2000 ORDER BY t2.citation_num DESC LIMIT 1;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the authors who have more than 10 papers in PVLDB .<CODESPLIT>SELECT t1.name FROM publication AS t4 JOIN journal AS t2 ON t4.jid = t2.jid JOIN writes AS t3 ON t3.pid = t4.pid JOIN author AS t1 ON t3.aid = t1.aid WHERE t2.name = "PVLDB" GROUP BY t1.name HAVING COUNT ( DISTINCT t4.title ) > 10;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the authors who have the most number of papers in PVLDB .<CODESPLIT>SELECT t1.name FROM publication AS t4 JOIN journal AS t2 ON t4.jid = t2.jid JOIN writes AS t3 ON t3.pid = t4.pid JOIN author AS t1 ON t3.aid = t1.aid WHERE t2.name = "PVLDB" GROUP BY t1.name ORDER BY COUNT ( DISTINCT t4.title ) DESC LIMIT 1;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the authors who have more than 10 papers containing keyword " Relational Database " .<CODESPLIT>SELECT t2.name FROM publication_keyword AS t5 JOIN keyword AS t1 ON t5.kid = t1.kid JOIN publication AS t3 ON t3.pid = t5.pid JOIN writes AS t4 ON t4.pid = t3.pid JOIN author AS t2 ON t4.aid = t2.aid WHERE t1.keyword = "Relational Database" GROUP BY t2.name HAVING COUNT ( DISTINCT t3.title ) > 10;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the conferences, which have more than 60 papers containing keyword " Relational Database " .<CODESPLIT>SELECT t2.name FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid = t1.kid JOIN publication AS t3 ON t3.pid = t4.pid JOIN conference AS t2 ON t3.cid = t2.cid WHERE t1.keyword = "Relational Database" GROUP BY t2.name HAVING COUNT ( DISTINCT t3.title ) > 60;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the journals, which have more than 60 papers containing keyword " Relational Database " .<CODESPLIT>SELECT t3.name FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid = t1.kid JOIN publication AS t2 ON t2.pid = t4.pid JOIN journal AS t3 ON t2.jid = t3.jid WHERE t1.keyword = "Relational Database" GROUP BY t3.name HAVING COUNT ( DISTINCT t2.title ) > 60;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the keywords, which have been contained by more than 100 papers in VLDB conference .<CODESPLIT>SELECT t1.keyword FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid = t1.kid JOIN publication AS t3 ON t3.pid = t4.pid JOIN conference AS t2 ON t3.cid = t2.cid WHERE t2.name = "VLDB" GROUP BY t1.keyword HAVING COUNT ( DISTINCT t3.title ) > 100;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the keywords, which have been contained by more than 100 papers in PVLDB .<CODESPLIT>SELECT t1.keyword FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid = t1.kid JOIN publication AS t2 ON t2.pid = t4.pid JOIN journal AS t3 ON t2.jid = t3.jid WHERE t3.name = "PVLDB" GROUP BY t1.keyword HAVING COUNT ( DISTINCT t2.title ) > 100;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the keywords, which have been contained by more than 10 papers of " H. V. Jagadish " .<CODESPLIT>SELECT t1.keyword FROM publication_keyword AS t5 JOIN keyword AS t1 ON t5.kid = t1.kid JOIN publication AS t3 ON t3.pid = t5.pid JOIN writes AS t4 ON t4.pid = t3.pid JOIN author AS t2 ON t4.aid = t2.aid WHERE t2.name = "H. V. Jagadish" GROUP BY t1.keyword HAVING COUNT ( DISTINCT t3.title ) > 10;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the authors who have more than 10 papers in the VLDB conference .<CODESPLIT>SELECT t1.name FROM publication AS t4 JOIN conference AS t2 ON t4.cid = t2.cid JOIN writes AS t3 ON t3.pid = t4.pid JOIN author AS t1 ON t3.aid = t1.aid WHERE t2.name = "VLDB" GROUP BY t1.name HAVING COUNT ( DISTINCT t4.title ) > 10;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the author who has the most number of papers in the VLDB conference .<CODESPLIT>SELECT t1.name FROM publication AS t4 JOIN conference AS t2 ON t4.cid = t2.cid JOIN writes AS t3 ON t3.pid = t4.pid JOIN author AS t1 ON t3.aid = t1.aid WHERE t2.name = "VLDB" GROUP BY t1.name ORDER BY COUNT ( DISTINCT t4.title ) DESC LIMIT 1;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the author in the " University of Michigan " whose papers have more than 5000 total citations .<CODESPLIT>SELECT t1.name FROM organization AS t2 JOIN author AS t1 ON t2.oid = t1.oid JOIN writes AS t3 ON t3.aid = t1.aid JOIN publication AS t4 ON t3.pid = t4.pid WHERE t2.name = "University of Michigan" GROUP BY t1.name HAVING SUM ( t4.citation_num ) > 5000;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>return me the author in the " University of Michigan " in Databases area whose papers have more than 5000 total citations .<CODESPLIT>SELECT t1.name FROM domain_author AS t6 JOIN author AS t1 ON t6.aid = t1.aid JOIN DOMAIN AS t3 ON t3.did = t6.did JOIN organization AS t5 ON t5.oid = t1.oid JOIN writes AS t2 ON t2.aid = t1.aid JOIN publication AS t4 ON t2.pid = t4.pid WHERE t3.name = "Databases" AND t5.name = "University of Michigan" GROUP BY t1.name HAVING SUM ( t4.citation_num ) > 5000;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>What year is the movie " The Imitation Game " from ?<CODESPLIT>SELECT release_year FROM movie WHERE title = "The Imitation Game";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>What year was " Benedict Cumberbatch " born ?<CODESPLIT>SELECT birth_year FROM actor WHERE name = "Benedict Cumberbatch";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>What is the nationality of the actress " Christoph Waltz " ?<CODESPLIT>SELECT nationality FROM actor WHERE name = "Christoph Waltz";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Find all movies produced in 2015<CODESPLIT>SELECT title FROM movie WHERE release_year = 2015;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Find all actors born in " Tehran "<CODESPLIT>SELECT name FROM actor WHERE birth_city = "Tehran";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Find all actors who are from Afghanistan<CODESPLIT>SELECT name FROM actor WHERE nationality = "Afghanistan";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Find all actors who were born in 1984<CODESPLIT>SELECT name FROM actor WHERE birth_year = 1984;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>When was " Kevin Spacey " born ?<CODESPLIT>SELECT birth_year FROM actor WHERE name = "actor_name0";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Where is the birth place of " Kevin Spacey "<CODESPLIT>SELECT birth_city FROM director WHERE name = "director_name0";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>What is the nationality of " Kevin Spacey " ?<CODESPLIT>SELECT nationality FROM director WHERE name = "director_name0";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>How much was the budget of " Finding Nemo "<CODESPLIT>SELECT budget FROM movie WHERE title = "Finding Nemo";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Find all movies directed by " Steven Spielberg " after 2006<CODESPLIT>SELECT t3.title FROM director AS t2 JOIN directed_by AS t1 ON t2.did = t1.did JOIN movie AS t3 ON t3.mid = t1.msid WHERE t2.name = "Steven Spielberg" AND t3.release_year > 2006;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Who is the director of the movie " James Bond " ?<CODESPLIT>SELECT t2.name FROM director AS t2 JOIN directed_by AS t1 ON t2.did = t1.did JOIN movie AS t3 ON t3.mid = t1.msid WHERE t3.title = "James Bond";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Find the actor who played " Alan Turing " in the movie " The Imitation Game "<CODESPLIT>SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid = t1.aid JOIN movie AS t3 ON t3.mid = t2.msid WHERE t2.role = "Alan Turing" AND t3.title = "The Imitation Game";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>What is the genre of the movie " Jurassic Park " ?<CODESPLIT>SELECT t2.genre FROM genre AS t2 JOIN classification AS t1 ON t2.gid = t1.gid JOIN movie AS t3 ON t3.mid = t1.msid WHERE t3.title = "Jurassic Park";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Who was the director of the movie Joy from 2015 ?<CODESPLIT>SELECT t2.name FROM director AS t2 JOIN directed_by AS t1 ON t2.did = t1.did JOIN movie AS t3 ON t3.mid = t1.msid WHERE t3.release_year = 2015 AND t3.title = "Joy";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Find all movies written by " Matt Damon "<CODESPLIT>SELECT t1.title FROM written_by AS t3 JOIN movie AS t1 ON t3.msid = t1.mid JOIN writer AS t2 ON t3.wid = t2.wid WHERE t2.name = "Matt Damon";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Find all movies written and produced by " Woody Allen "<CODESPLIT>SELECT t2.title FROM movie AS t2 JOIN made_by AS t3 ON t2.mid = t3.msid JOIN producer AS t1 ON t1.pid = t3.pid JOIN written_by AS t5 ON t5.msid = t2.mid JOIN writer AS t4 ON t5.wid = t4.wid WHERE t1.name = "Woody Allen" AND t4.name = "Woody Allen";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Find all movies featuring " Robin Wright "<CODESPLIT>SELECT t2.title FROM CAST AS t3 JOIN actor AS t1 ON t3.aid = t1.aid JOIN movie AS t2 ON t2.mid = t3.msid WHERE t1.name = "Robin Wright";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>What was the budget of the movie Juno from 2007 ?<CODESPLIT>SELECT budget FROM movie WHERE release_year = 2007 AND title = "Juno";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Find all Sci-Fi produced in year 2010<CODESPLIT>SELECT t3.title FROM genre AS t2 JOIN classification AS t1 ON t2.gid = t1.gid JOIN movie AS t3 ON t3.mid = t1.msid WHERE t2.genre = "Sci-Fi" AND t3.release_year = 2010;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Find all actors born in " Austin " after 1980<CODESPLIT>SELECT name FROM actor WHERE birth_city = "Austin" AND birth_year > 1980;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Find all movies by directors born in " Los Angeles "<CODESPLIT>SELECT t3.title FROM director AS t2 JOIN directed_by AS t1 ON t2.did = t1.did JOIN movie AS t3 ON t3.mid = t1.msid WHERE t2.birth_city = "Los Angeles";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Find all actors who were born in " New York City " in 1984<CODESPLIT>SELECT name FROM actor WHERE birth_city = "New York City" AND birth_year = 1984;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Find all movies about nuclear weapons<CODESPLIT>SELECT t3.title FROM tags AS t2 JOIN keyword AS t1 ON t2.kid = t1.id JOIN movie AS t3 ON t2.msid = t3.mid WHERE t1.keyword = "nuclear weapons";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Which movies did " Alfred Hitchcock " direct ?<CODESPLIT>SELECT t3.title FROM director AS t2 JOIN directed_by AS t1 ON t2.did = t1.did JOIN movie AS t3 ON t3.mid = t1.msid WHERE t2.name = "Alfred Hitchcock";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Find all movies directed by " Asghar Farhadi " and featuring " Taraneh Alidoosti "<CODESPLIT>SELECT t4.title FROM CAST AS t5 JOIN actor AS t1 ON t5.aid = t1.aid JOIN movie AS t4 ON t4.mid = t5.msid JOIN directed_by AS t2 ON t4.mid = t2.msid JOIN director AS t3 ON t3.did = t2.did WHERE t1.name = "Taraneh Alidoosti" AND t3.name = "Asghar Farhadi";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>What are all the tv series created by " Shonda Rhimes " ?<CODESPLIT>SELECT t2.title FROM producer AS t1 JOIN made_by AS t3 ON t1.pid = t3.pid JOIN tv_series AS t2 ON t2.sid = t3.msid WHERE t1.name = "Shonda Rhimes";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Who acts " Olivia Pope " in the series Scandal ?<CODESPLIT>SELECT t1.name FROM CAST AS t3 JOIN actor AS t1 ON t3.aid = t1.aid JOIN tv_series AS t2 ON t2.sid = t3.msid WHERE t3.role = "Olivia Pope" AND t2.title = "Scandal";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Who is the writer of the movie " The Truman Show "<CODESPLIT>SELECT t2.name FROM written_by AS t3 JOIN movie AS t1 ON t3.msid = t1.mid JOIN writer AS t2 ON t3.wid = t2.wid WHERE t1.title = "The Truman Show";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>What are the series featuring " Scott Foley " ?<CODESPLIT>SELECT t2.title FROM CAST AS t3 JOIN actor AS t1 ON t3.aid = t1.aid JOIN tv_series AS t2 ON t2.sid = t3.msid WHERE t1.name = "Scott Foley";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Find the directors of all movies featuring " Kate Winslet "<CODESPLIT>SELECT t3.name FROM CAST AS t4 JOIN actor AS t1 ON t4.aid = t1.aid JOIN movie AS t5 ON t5.mid = t4.msid JOIN directed_by AS t2 ON t5.mid = t2.msid JOIN director AS t3 ON t3.did = t2.did WHERE t1.name = "Kate Winslet";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Find the producers of all movies in which " Kate Winslet " is an actor<CODESPLIT>SELECT t1.name FROM CAST AS t3 JOIN actor AS t2 ON t3.aid = t2.aid JOIN movie AS t5 ON t5.mid = t3.msid JOIN made_by AS t4 ON t5.mid = t4.msid JOIN producer AS t1 ON t1.pid = t4.pid WHERE t2.name = "Kate Winslet";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Who is the director of the tv series " House of Cards " from 2013 ?<CODESPLIT>SELECT t2.name FROM director AS t2 JOIN directed_by AS t1 ON t2.did = t1.did JOIN tv_series AS t3 ON t3.sid = t1.msid WHERE t3.release_year = 2013 AND t3.title = "House of Cards";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Find all the female actors from Austin<CODESPLIT>SELECT name FROM actor WHERE birth_city = "Austin" AND gender = "female";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Find all actors from Italy born after 1980<CODESPLIT>SELECT name FROM actor WHERE birth_year > 1980 AND nationality = "Italy";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Find all the female actors born in " New York City " after 1980<CODESPLIT>SELECT name FROM actor WHERE birth_city = "New York City" AND birth_year > 1980 AND gender = "female";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Find all the female actors in the movie " Saving Private Ryan "<CODESPLIT>SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid = t1.aid JOIN movie AS t3 ON t3.mid = t2.msid WHERE t1.gender = "female" AND t3.title = "Saving Private Ryan";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Find all the directors who are from Afghanistan<CODESPLIT>SELECT name FROM director WHERE nationality = "Afghanistan";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Find the actors who played in the movie " Camp X-Ray "<CODESPLIT>SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid = t1.aid JOIN movie AS t3 ON t3.mid = t2.msid WHERE t3.title = "Camp X-Ray";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Find all actors from Canada who acted in " James Bond " movies<CODESPLIT>SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid = t1.aid JOIN movie AS t3 ON t3.mid = t2.msid WHERE t1.nationality = "Canada" AND t3.title = "James Bond";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>find all films in which " Rowan Atkinson " acted as " Mr. Bean "<CODESPLIT>SELECT t2.title FROM CAST AS t3 JOIN actor AS t1 ON t3.aid = t1.aid JOIN movie AS t2 ON t2.mid = t3.msid WHERE t1.name = "Rowan Atkinson" AND t3.role = "Mr. Bean";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>where is the director of " The Past " from<CODESPLIT>SELECT t2.birth_city FROM director AS t2 JOIN directed_by AS t1 ON t2.did = t1.did JOIN movie AS t3 ON t3.mid = t1.msid WHERE t3.title = "The Past";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>who acted the role of " Mr. Bean "<CODESPLIT>SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid = t1.aid WHERE t2.role = "Mr. Bean";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what are the genres of movies directed by " Asghar Farhadi "<CODESPLIT>SELECT t3.genre FROM director AS t5 JOIN directed_by AS t2 ON t5.did = t2.did JOIN movie AS t4 ON t4.mid = t2.msid JOIN classification AS t1 ON t4.mid = t1.msid JOIN genre AS t3 ON t3.gid = t1.gid WHERE t5.name = "Asghar Farhadi";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Which movie had the character " Daffy Duck "<CODESPLIT>SELECT t1.title FROM movie AS t1 JOIN CAST AS t2 ON t1.mid = t2.msid WHERE t2.role = "Daffy Duck";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>What are the major roles in the movie " Daddy Long Legs "<CODESPLIT>SELECT t2.role FROM CAST AS t2 JOIN actor AS t1 ON t2.aid = t1.aid JOIN movie AS t3 ON t3.mid = t2.msid WHERE t3.title = "Daddy Long Legs";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>List all the directors of movies about nuclear weapons<CODESPLIT>SELECT t3.name FROM director AS t3 JOIN directed_by AS t2 ON t3.did = t2.did JOIN movie AS t4 ON t4.mid = t2.msid JOIN tags AS t5 ON t5.msid = t4.mid JOIN keyword AS t1 ON t5.kid = t1.id WHERE t1.keyword = "nuclear weapons";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>What is the number of movies in which " Jennifer Aniston " acted after 2010 ?<CODESPLIT>SELECT COUNT ( DISTINCT t2.title ) FROM CAST AS t3 JOIN actor AS t1 ON t3.aid = t1.aid JOIN movie AS t2 ON t2.mid = t3.msid WHERE t1.name = "Jennifer Aniston" AND t2.release_year > 2010;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>What is the number of actors in the movie " Saving Private Ryan " ?<CODESPLIT>SELECT COUNT ( DISTINCT t1.name ) FROM CAST AS t2 JOIN actor AS t1 ON t2.aid = t1.aid JOIN movie AS t3 ON t3.mid = t2.msid WHERE t3.title = "Saving Private Ryan";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>How many movies did " Steven Spielberg " direct ?<CODESPLIT>SELECT COUNT ( DISTINCT t3.title ) FROM director AS t2 JOIN directed_by AS t1 ON t2.did = t1.did JOIN movie AS t3 ON t3.mid = t1.msid WHERE t2.name = "Steven Spielberg";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>How many movies were produced in the year 2013 ?<CODESPLIT>SELECT COUNT ( DISTINCT title ) FROM movie WHERE release_year = 2013;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>What is the number of movies directed by " Woody Allen " per year ?<CODESPLIT>SELECT COUNT ( DISTINCT t3.title ) , t3.release_year FROM director AS t2 JOIN directed_by AS t1 ON t2.did = t1.did JOIN movie AS t3 ON t3.mid = t1.msid WHERE t2.name = "Woody Allen" GROUP BY t3.release_year;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>How many movies did " Shahab Hosseini " act in ?<CODESPLIT>SELECT COUNT ( DISTINCT t2.title ) FROM CAST AS t3 JOIN actor AS t1 ON t3.aid = t1.aid JOIN movie AS t2 ON t2.mid = t3.msid WHERE t1.name = "Shahab Hosseini";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>How many actors were born in " Los Angeles " after 2000 ?<CODESPLIT>SELECT COUNT ( DISTINCT name ) FROM actor WHERE birth_city = "Los Angeles" AND birth_year > 2000;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>How many movies did " Humphrey Bogart " act in before 1942 ?<CODESPLIT>SELECT COUNT ( DISTINCT t2.title ) FROM CAST AS t3 JOIN actor AS t1 ON t3.aid = t1.aid JOIN movie AS t2 ON t2.mid = t3.msid WHERE t1.name = "Humphrey Bogart" AND t2.release_year < 1942;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>What is the number of movies that " Brad Pitt " acts in per year ?<CODESPLIT>SELECT COUNT ( DISTINCT t2.title ) , t2.release_year FROM CAST AS t3 JOIN actor AS t1 ON t3.aid = t1.aid JOIN movie AS t2 ON t2.mid = t3.msid WHERE t1.name = "Brad Pitt" GROUP BY t2.release_year;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>How many movies about Iraq war were produced in 2015 ?<CODESPLIT>SELECT COUNT ( DISTINCT t3.title ) FROM tags AS t2 JOIN keyword AS t1 ON t2.kid = t1.id JOIN movie AS t3 ON t2.msid = t3.mid WHERE t1.keyword = "Iraq war" AND t3.release_year = 2015;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>How many movies about Persians were released after 1990 ?<CODESPLIT>SELECT COUNT ( DISTINCT t3.title ) FROM tags AS t2 JOIN keyword AS t1 ON t2.kid = t1.id JOIN movie AS t3 ON t2.msid = t3.mid WHERE t1.keyword = "Persians" AND t3.release_year > 1990;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>How many movies did " Quentin Tarantino " direct after 2010 ?<CODESPLIT>SELECT COUNT ( DISTINCT t3.title ) FROM director AS t2 JOIN directed_by AS t1 ON t2.did = t1.did JOIN movie AS t3 ON t3.mid = t1.msid WHERE t2.name = "Quentin Tarantino" AND t3.release_year > 2010;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>How many movies did " Quentin Tarantino " direct before 2010 ?<CODESPLIT>SELECT COUNT ( DISTINCT t3.title ) FROM director AS t2 JOIN directed_by AS t1 ON t2.did = t1.did JOIN movie AS t3 ON t3.mid = t1.msid WHERE t2.name = "Quentin Tarantino" AND t3.release_year < 2010;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>How many movies did " Quentin Tarantino " direct before 2002 and after 2010 ?<CODESPLIT>SELECT COUNT ( DISTINCT t4.title ) FROM director AS t3 JOIN directed_by AS t2 ON t3.did = t2.did JOIN movie AS t4 ON t4.mid = t2.msid JOIN made_by AS t5 ON t4.mid = t5.msid JOIN producer AS t1 ON t1.pid = t5.pid WHERE t3.name = "Quentin Tarantino" AND t4.release_year < 2010 AND t4.release_year > 2002;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>How many female actors were born in " New York City " after 1980 ?<CODESPLIT>SELECT COUNT ( DISTINCT name ) FROM actor WHERE birth_city = "New York City" AND birth_year > 1980 AND gender = "female";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>find the number of actors from Iran who played in " Jim Jarmusch " movies<CODESPLIT>SELECT COUNT ( DISTINCT t1.name ) FROM CAST AS t4 JOIN actor AS t1 ON t4.aid = t1.aid JOIN movie AS t5 ON t5.mid = t4.msid JOIN directed_by AS t2 ON t5.mid = t2.msid JOIN director AS t3 ON t3.did = t2.did WHERE t1.nationality = "Iran" AND t3.name = "Jim Jarmusch";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>How many actors from China have acted in " Rush Hour 3 "<CODESPLIT>SELECT COUNT ( DISTINCT t1.name ) FROM CAST AS t2 JOIN actor AS t1 ON t2.aid = t1.aid JOIN movie AS t3 ON t3.mid = t2.msid WHERE t1.nationality = "China" AND t3.title = "Rush Hour 3";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Find all movies that star both " Woody Strode " and " Jason Robards "<CODESPLIT>SELECT t4.title FROM CAST AS t5 JOIN actor AS t1 ON t5.aid = t1.aid JOIN movie AS t4 ON t4.mid = t5.msid JOIN CAST AS t3 ON t4.mid = t3.msid JOIN actor AS t2 ON t3.aid = t2.aid WHERE t1.name = "Woody Strode" AND t2.name = "Jason Robards";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Find all actors who acted in the same movie as " Tom Hanks "<CODESPLIT>SELECT t1.name FROM CAST AS t4 JOIN actor AS t1 ON t4.aid = t1.aid JOIN movie AS t5 ON t5.mid = t4.msid JOIN CAST AS t3 ON t5.mid = t3.msid JOIN actor AS t2 ON t3.aid = t2.aid WHERE t2.name = "Tom Hanks";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>What movies have the same director as the movie " Revolutionary Road " ?<CODESPLIT>SELECT t3.title FROM director AS t5 JOIN directed_by AS t2 ON t5.did = t2.did JOIN directed_by AS t1 ON t5.did = t1.did JOIN movie AS t4 ON t4.mid = t2.msid JOIN movie AS t3 ON t3.mid = t1.msid WHERE t4.title = "Revolutionary Road";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Find the movie which is classified in the most number of genres<CODESPLIT>SELECT t3.title FROM genre AS t2 JOIN classification AS t1 ON t2.gid = t1.gid JOIN movie AS t3 ON t3.mid = t1.msid GROUP BY t3.title ORDER BY COUNT ( DISTINCT t2.genre ) DESC LIMIT 1;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>which movie has the most number of actors from China ?<CODESPLIT>SELECT t2.title FROM CAST AS t3 JOIN actor AS t1 ON t3.aid = t1.aid JOIN movie AS t2 ON t2.mid = t3.msid WHERE t1.nationality = "China" GROUP BY t2.title ORDER BY COUNT ( DISTINCT t1.name ) DESC LIMIT 1;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Find the actors who played in the latest movie by " Quentin Tarantino "<CODESPLIT>SELECT t1.name FROM CAST AS t4 JOIN actor AS t1 ON t4.aid = t1.aid JOIN movie AS t5 ON t5.mid = t4.msid JOIN directed_by AS t2 ON t5.mid = t2.msid JOIN director AS t3 ON t3.did = t2.did WHERE t3.name = "Quentin Tarantino" ORDER BY t5.release_year DESC LIMIT 1;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Find the name and budget of the latest movie by " Quentin Tarantino "<CODESPLIT>SELECT t3.budget , t3.title FROM director AS t2 JOIN directed_by AS t1 ON t2.did = t1.did JOIN movie AS t3 ON t3.mid = t1.msid WHERE t2.name = "Quentin Tarantino" ORDER BY t3.release_year DESC LIMIT 1;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>What is the latest movie by " Jim Jarmusch "<CODESPLIT>SELECT t3.title FROM director AS t2 JOIN directed_by AS t1 ON t2.did = t1.did JOIN movie AS t3 ON t3.mid = t1.msid WHERE t2.name = "Jim Jarmusch" ORDER BY t3.release_year DESC LIMIT 1;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Which producer has worked with the most number of directors ?<CODESPLIT>SELECT t1.name FROM director AS t3 JOIN directed_by AS t2 ON t3.did = t2.did JOIN movie AS t4 ON t4.mid = t2.msid JOIN made_by AS t5 ON t4.mid = t5.msid JOIN producer AS t1 ON t1.pid = t5.pid GROUP BY t1.name ORDER BY COUNT ( DISTINCT t3.name ) DESC LIMIT 1;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Find the latest movie which " Gabriele Ferzetti " acted in<CODESPLIT>SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid = t1.aid JOIN movie AS t3 ON t3.mid = t2.msid WHERE t1.name = "Gabriele Ferzetti" ORDER BY t3.release_year DESC LIMIT 1;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>how many buttercup kitchen are there in san francisco ?<CODESPLIT>SELECT COUNT ( * ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = "san francisco" AND t1.name = "buttercup kitchen";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>how many chinese restaurants are there in the bay area ?<CODESPLIT>SELECT COUNT ( * ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name WHERE t2.region = "bay area" AND t1.food_type = "chinese";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>how many jamerican cuisine are there in santa cruz county ?<CODESPLIT>SELECT COUNT ( * ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name WHERE t2.county = "santa cruz county" AND t1.name = "jamerican cuisine";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>where is jamerican cuisine ?<CODESPLIT>SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t1.name = "jamerican cuisine";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what is the best french restaurant in san francisco ?<CODESPLIT>SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = "san francisco" AND t1.food_type = "french" AND t1.rating = ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = "san francisco" AND t1.food_type = "french" );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>where is denny in the bay area ?<CODESPLIT>SELECT t3.house_number , t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name JOIN LOCATION AS t3 ON t1.id = t3.restaurant_id WHERE t2.region = "bay area" AND t1.name = "denny";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what are some good restaurants on bethel island rd in bethel island ?<CODESPLIT>SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = "bethel island" AND t2.street_name = "bethel island rd" AND t1.rating > 2.5;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>where can we find a restaurant in alameda ?<CODESPLIT>SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = "alameda";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>give me some restaurants good for french food ?<CODESPLIT>SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t1.food_type = "french" AND t1.rating > 2.5;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>how many places for french food are there in palo alto ?<CODESPLIT>SELECT COUNT ( * ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = "palo alto" AND t1.food_type = "french";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>how many italian restaurants are in the yolo county ?<CODESPLIT>SELECT COUNT ( * ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name WHERE t2.county = "yolo county" AND t1.food_type = "italian";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>where can i eat french food in mountain view ?<CODESPLIT>SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = "mountain view" AND t1.food_type = "french";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>how many denny are there in the bay area ?<CODESPLIT>SELECT COUNT ( * ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name WHERE t2.region = "bay area" AND t1.name = "denny";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>give me a good restaurant in alameda ?<CODESPLIT>SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = "alameda" AND t1.rating > 2.5;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>where is a good restaurant on buchanan in san francisco for arabic food ?<CODESPLIT>SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = "san francisco" AND t2.street_name = "buchanan" AND t1.food_type = "arabic" AND t1.rating > 2.5;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>where can i eat french food in the bay area ?<CODESPLIT>SELECT t3.house_number , t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name JOIN LOCATION AS t3 ON t1.id = t3.restaurant_id WHERE t2.region = "bay area" AND t1.food_type = "french";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>give me some restaurants on bethel island rd in bethel island ?<CODESPLIT>SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = "bethel island" AND t2.street_name = "bethel island rd";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>where is the best restaurant in the bay area for american food ?<CODESPLIT>SELECT t3.house_number , t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name JOIN LOCATION AS t3 ON t1.id = t3.restaurant_id WHERE t2.region = "bay area" AND t1.food_type = "american" AND t1.rating = ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name WHERE t2.region = "bay area" AND t1.food_type = "american" );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>give me some restaurants good for french food in the yosemite and mono lake area ?<CODESPLIT>SELECT t3.house_number , t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name JOIN LOCATION AS t3 ON t1.id = t3.restaurant_id WHERE t2.region = "yosemite and mono lake area" AND t1.food_type = "french" AND t1.rating > 2.5;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>where are some restaurants good for arabic food in mountain view ?<CODESPLIT>SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = "mountain view" AND t1.food_type = "arabic" AND t1.rating > 2.5;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>where can i find a jamerican cuisine in san francisco ?<CODESPLIT>SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = "san francisco" AND t1.name = "jamerican cuisine";
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>where can we find some restaurants in the bay area ?<CODESPLIT>SELECT t2.house_number , t1.name FROM LOCATION AS t2 JOIN restaurant AS t1 ON t1.id = t2.restaurant_id WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region = "bay area" );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>give me a good restaurant in the bay area ?<CODESPLIT>SELECT t2.house_number , t1.name FROM LOCATION AS t2 JOIN restaurant AS t1 ON t1.id = t2.restaurant_id WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region = "region0" ) AND t1.rating > 2.5;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>How many singers do we have?<CODESPLIT>SELECT count(*) FROM singer
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Show name, country, age for all singers ordered by age from the oldest to the youngest.<CODESPLIT>SELECT name , country , age FROM singer ORDER BY age DESC
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>What is the average, minimum, and maximum age of all singers from France?<CODESPLIT>SELECT avg(age) , min(age) , max(age) FROM singer WHERE country = 'France'
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Show the name and the release year of the song by the youngest singer.<CODESPLIT>SELECT song_name , song_release_year FROM singer ORDER BY age LIMIT 1
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>What are all distinct countries where singers above age 20 are from?<CODESPLIT>SELECT DISTINCT country FROM singer WHERE age > 20
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Show all countries and the number of singers in each country.<CODESPLIT>SELECT country , count(*) FROM singer GROUP BY country
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>List all song names by singers above the average age.<CODESPLIT>SELECT song_name FROM singer WHERE age > (SELECT avg(age) FROM singer)
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Show location and name for all stadiums with a capacity between 5000 and 10000.<CODESPLIT>SELECT LOCATION , name FROM stadium WHERE capacity BETWEEN 5000 AND 10000
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>What is the maximum capacity and the average of all stadiums ?<CODESPLIT>select max(capacity), average from stadium
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>What is the average and maximum capacities for all stadiums ?<CODESPLIT>select avg(capacity) , max(capacity) from stadium
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>What is the name and capacity for the stadium with highest average attendance?<CODESPLIT>SELECT name , capacity FROM stadium ORDER BY average DESC LIMIT 1
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>How many concerts are there in year 2014 or 2015?<CODESPLIT>SELECT count(*) FROM concert WHERE YEAR = 2014 OR YEAR = 2015
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Show the stadium name and the number of concerts in each stadium.<CODESPLIT>SELECT T2.name , count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id GROUP BY T1.stadium_id
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Show the stadium name and capacity with most number of concerts in year 2014 or after.<CODESPLIT>SELECT T2.name , T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.year >= 2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>What is the name and capacity of the stadium with the most concerts after 2013 ?<CODESPLIT>select t2.name , t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id where t1.year > 2013 group by t2.stadium_id order by count(*) desc limit 1
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Which year has most number of concerts?<CODESPLIT>SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Show the stadium names without any concert.<CODESPLIT>SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Show countries where a singer above age 40 and a singer below 30 are from.<CODESPLIT>SELECT country FROM singer WHERE age > 40 INTERSECT SELECT country FROM singer WHERE age < 30
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Show names for all stadiums except for stadiums having a concert in year 2014.<CODESPLIT>SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.year = 2014
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Show the name and theme for all concerts and the number of singers in each concert.<CODESPLIT>SELECT T2.concert_name , T2.theme , count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id = T2.concert_id GROUP BY T2.concert_id
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>What are the names , themes , and number of singers for every concert ?<CODESPLIT>select t2.concert_name , t2.theme , count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id = t2.concert_id group by t2.concert_id
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>List singer names and number of concerts for each singer.<CODESPLIT>SELECT T2.name , count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id = T2.singer_id GROUP BY T2.singer_id
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>List all singer names in concerts in year 2014.<CODESPLIT>SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id = T2.singer_id JOIN concert AS T3 ON T1.concert_id = T3.concert_id WHERE T3.year = 2014
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>what is the name and nation of the singer who have a song having 'Hey' in its name?<CODESPLIT>SELECT name , country FROM singer WHERE song_name LIKE '%Hey%'
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.<CODESPLIT>SELECT T2.name , T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.Year = 2014 INTERSECT SELECT T2.name , T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.Year = 2015
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Find the number of concerts happened in the stadium with the highest capacity .<CODESPLIT>select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Find the number of pets whose weight is heavier than 10.<CODESPLIT>SELECT count(*) FROM pets WHERE weight > 10
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Find the weight of the youngest dog.<CODESPLIT>SELECT weight FROM pets ORDER BY pet_age LIMIT 1
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Find the maximum weight for each type of pet. List the maximum weight and pet type.<CODESPLIT>SELECT max(weight) , petType FROM pets GROUP BY petType
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Find number of pets owned by students who are older than 20.<CODESPLIT>SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T1.age > 20
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Find the number of dog pets that are raised by female students (with sex F).<CODESPLIT>SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T2.petid = T3.petid WHERE T1.sex = 'F' AND T3.pettype = 'dog'
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Find the number of distinct type of pets.<CODESPLIT>SELECT count(DISTINCT pettype) FROM pets
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Find the first name of students who have cat or dog pet.<CODESPLIT>SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat' OR T3.pettype = 'dog'
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Find the first name of students who have both cat and dog pets .<CODESPLIT>select t1.fname from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t3.petid = t2.petid where t3.pettype = 'cat' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t3.petid = t2.petid where t3.pettype = 'dog'
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>What are the students' first names who have both cats and dogs as pets?<CODESPLIT>SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'dog'
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Find the major and age of students who do not have a cat pet.<CODESPLIT>SELECT major , age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat')
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Find the id of students who do not have a cat pet.<CODESPLIT>SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat'
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Find the first name and age of students who have a dog but do not have a cat as a pet.<CODESPLIT>SELECT T1.fname , T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat')
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Find the type and weight of the youngest pet.<CODESPLIT>SELECT pettype , weight FROM pets ORDER BY pet_age LIMIT 1
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Find the id and weight of all pets whose age is older than 1.<CODESPLIT>SELECT petid , weight FROM pets WHERE pet_age > 1
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Find the average and maximum age for each type of pet.<CODESPLIT>SELECT avg(pet_age) , max(pet_age) , pettype FROM pets GROUP BY pettype
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Find the average weight for each pet type.<CODESPLIT>SELECT avg(weight) , pettype FROM pets GROUP BY pettype
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Find the first name and age of students who have a pet.<CODESPLIT>SELECT DISTINCT T1.fname , T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Find the id of the pet owned by student whose last name is ‘Smith’.<CODESPLIT>SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T1.Lname = 'Smith'
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Find the number of pets for each student who has any pet and student id.<CODESPLIT>SELECT count(*) , T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid GROUP BY T1.stuid
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>For students who have pets , how many pets does each student have ? list their ids instead of names .<CODESPLIT>select count(*) , t1.stuid from student as t1 join has_pet as t2 on t1.stuid = t2.stuid group by t1.stuid
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Find the first name and gender of student who have more than one pet.<CODESPLIT>SELECT T1.fname , T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid GROUP BY T1.stuid HAVING count(*) > 1
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Find the last name of the student who has a cat that is age 3.<CODESPLIT>SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pet_age = 3 AND T3.pettype = 'cat'
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Find the average age of students who do not have any pet .<CODESPLIT>select avg(age) from student where stuid not in (select stuid from has_pet)
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>How many continents are there?<CODESPLIT>SELECT count(*) FROM CONTINENTS;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>How many countries does each continent have? List the continent id, continent name and the number of countries.<CODESPLIT>SELECT T1.ContId , T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>How many countries are listed?<CODESPLIT>SELECT count(*) FROM COUNTRIES;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>How many models does each car maker produce? List maker full name, id and the number.<CODESPLIT>SELECT T1.FullName , T1.Id , count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Which model of the car has the minimum horsepower?<CODESPLIT>SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id ORDER BY T2.horsepower ASC LIMIT 1;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Find the model of the car whose weight is below the average weight.<CODESPLIT>SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.Weight < (SELECT avg(Weight) FROM CARS_DATA)
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Find the name of the makers that produced some cars in the year of 1970?<CODESPLIT>SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker JOIN CAR_NAMES AS T3 ON T2.model = T3.model JOIN CARS_DATA AS T4 ON T3.MakeId = T4.id WHERE T4.year = '1970';
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Find the make and production time of the cars that were produced in the earliest year?<CODESPLIT>SELECT T2.Make , T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T1.Year = (SELECT min(YEAR) FROM CARS_DATA);
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Which distinct car models are the produced after 1980?<CODESPLIT>SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model = T2.model JOIN CARS_DATA AS T3 ON T2.MakeId = T3.id WHERE T3.year > 1980;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>How many car makers are there in each continents? List the continent name and the count.<CODESPLIT>SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Which of the countries has the most car makers? List the country name.<CODESPLIT>SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country = T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>How many car models are produced by each maker ? Only list the count and the maker full name .<CODESPLIT>select count(*) , t2.fullname from model_list as t1 join car_makers as t2 on t1.maker = t2.id group by t2.id;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>What is the number of car models that are produced by each maker and what is the id and full name of each maker?<CODESPLIT>SELECT Count(*) , T2.FullName , T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker = T2.Id GROUP BY T2.id;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>What is the accelerate of the car make amc hornet sportabout (sw)?<CODESPLIT>SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T2.Make = 'amc hornet sportabout (sw)';
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>How many car makers are there in france?<CODESPLIT>SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country = T2.CountryId WHERE T2.CountryName = 'france';
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>How many car models are produced in the usa?<CODESPLIT>SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker = T2.Id JOIN COUNTRIES AS T3 ON T2.Country = T3.CountryId WHERE T3.CountryName = 'usa';
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>What is the average miles per gallon(mpg) of the cars with 4 cylinders?<CODESPLIT>SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders = 4;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>What is the smallest weight of the car produced with 8 cylinders on 1974 ?<CODESPLIT>select min(weight) from cars_data where cylinders = 8 and year = 1974
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>What are all the makers and models?<CODESPLIT>SELECT Maker , Model FROM MODEL_LIST;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>What are the countries having at least one car maker? List name and id.<CODESPLIT>SELECT T1.CountryName , T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country GROUP BY T1.CountryId HAVING count(*) >= 1;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>What is the number of the cars with horsepower more than 150?<CODESPLIT>SELECT count(*) FROM CARS_DATA WHERE horsepower > 150;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>What is the average weight of cars each year?<CODESPLIT>SELECT avg(Weight) , YEAR FROM CARS_DATA GROUP BY YEAR;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Which countries in europe have at least 3 car manufacturers?<CODESPLIT>SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent = T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId = T3.Country WHERE T2.Continent = 'europe' GROUP BY T1.CountryName HAVING count(*) >= 3;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>What is the maximum horsepower and the make of the car models with 3 cylinders?<CODESPLIT>SELECT T2.horsepower , T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.cylinders = 3 ORDER BY T2.horsepower DESC LIMIT 1;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Which model saves the most gasoline? That is to say, have the maximum miles per gallon.<CODESPLIT>SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id ORDER BY T2.mpg DESC LIMIT 1;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>What is the car model with the highest mpg ?<CODESPLIT>select t1.model from car_names as t1 join cars_data as t2 on t1.makeid = t2.id order by t2.mpg desc limit 1;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>What is the average horsepower of the cars before 1980?<CODESPLIT>SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR < 1980;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>What is the average horsepower for all cars produced before 1980 ?<CODESPLIT>select avg(horsepower) from cars_data where year < 1980;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>What is the average edispl of the cars of model volvo?<CODESPLIT>SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T1.Model = 'volvo';
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>What is the maximum accelerate for different number of cylinders?<CODESPLIT>SELECT max(Accelerate) , Cylinders FROM CARS_DATA GROUP BY Cylinders;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Which model has the most version(make) of cars?<CODESPLIT>SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>How many cars have more than 4 cylinders?<CODESPLIT>SELECT count(*) FROM CARS_DATA WHERE Cylinders > 4;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>how many cars were produced in 1980?<CODESPLIT>SELECT count(*) FROM CARS_DATA WHERE YEAR = 1980;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>How many car models were produced by the maker with full name American Motor Company?<CODESPLIT>SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker WHERE T1.FullName = 'American Motor Company';
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Which makers designed more than 3 car models? List full name and the id.<CODESPLIT>SELECT T1.FullName , T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id HAVING count(*) > 3;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?<CODESPLIT>SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model = T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker = T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId = T4.Id WHERE T3.FullName = 'General Motors' OR T4.weight > 3500;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>In which years cars were produced weighing no less than 3000 and no more than 4000 ?<CODESPLIT>select distinct year from cars_data where weight between 3000 and 4000;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>What is the horsepower of the car with the largest accelerate?<CODESPLIT>SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>For model volvo, how many cylinders does the car with the least accelerate have?<CODESPLIT>SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T2.Model = 'volvo' ORDER BY T1.accelerate ASC LIMIT 1;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>How many cars have a larger accelerate than the car with the largest horsepower?<CODESPLIT>SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate > ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>How many countries has more than 2 car makers ?<CODESPLIT>select count(*) from countries as t1 join car_makers as t2 on t1.countryid = t2.country group by t1.countryid having count(*) > 2
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>How many cars has over 6 cylinders?<CODESPLIT>SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders > 6;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>For the cars with 4 cylinders, which model has the largest horsepower?<CODESPLIT>SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.Cylinders = 4 ORDER BY T2.horsepower DESC LIMIT 1;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.<CODESPLIT>SELECT T2.MakeId , T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T1.Horsepower > (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders <= 3;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Among the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ?<CODESPLIT>select t2.makeid , t2.make from cars_data as t1 join car_names as t2 on t1.id = t2.makeid where t1.horsepower > (select min(horsepower) from cars_data) and t1.cylinders < 4;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?<CODESPLIT>select max(mpg) from cars_data where cylinders = 8 or year < 1980
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Which models are lighter than 3500 but not built by the 'Ford Motor Company'?<CODESPLIT>SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model = T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId = T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker = T4.Id WHERE T3.weight < 3500 AND T4.FullName != 'Ford Motor Company';
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>What are the name of the countries where there is not a single car maker?<CODESPLIT>SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId = T2.Country;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Which are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker .<CODESPLIT>select t1.id , t1.maker from car_makers as t1 join model_list as t2 on t1.id = t2.maker group by t1.id having count(*) >= 2 intersect select t1.id , t1.maker from car_makers as t1 join model_list as t2 on t1.id = t2.maker join car_names as t3 on t2.model = t3.model group by t1.id having count(*) > 3;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?<CODESPLIT>SELECT T1.Id , T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id HAVING count(*) >= 2 INTERSECT SELECT T1.Id , T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker JOIN CAR_NAMES AS T3 ON T2.model = T3.model GROUP BY T1.Id HAVING count(*) > 3;
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?<CODESPLIT>SELECT T1.countryId , T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country GROUP BY T1.countryId HAVING count(*) > 3 UNION SELECT T1.countryId , T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country JOIN MODEL_LIST AS T3 ON T2.Id = T3.Maker WHERE T3.Model = 'fiat';
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?<CODESPLIT>select t1.countryid , t1.countryname from countries as t1 join car_makers as t2 on t1.countryid = t2.country group by t1.countryid having count(*) > 3 union select t1.countryid , t1.countryname from countries as t1 join car_makers as t2 on t1.countryid = t2.country join model_list as t3 on t2.id = t3.maker where t3.model = 'fiat';
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Which country does Airline "JetBlue Airways" belong to?<CODESPLIT>SELECT Country FROM AIRLINES WHERE Airline = "JetBlue Airways"
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>What is the abbreviation of Airline "JetBlue Airways"?<CODESPLIT>SELECT Abbreviation FROM AIRLINES WHERE Airline = "JetBlue Airways"
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>List all airline names and their abbreviations in "USA".<CODESPLIT>SELECT Airline , Abbreviation FROM AIRLINES WHERE Country = "USA"
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>List the airport code and name in the city of Anthony.<CODESPLIT>SELECT AirportCode , AirportName FROM AIRPORTS WHERE city = "Anthony"
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>How many airlines do we have?<CODESPLIT>SELECT count(*) FROM AIRLINES
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>How many airports do we have?<CODESPLIT>SELECT count(*) FROM AIRPORTS
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>How many flights do we have?<CODESPLIT>SELECT count(*) FROM FLIGHTS
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Which airline has abbreviation 'UAL'?<CODESPLIT>SELECT Airline FROM AIRLINES WHERE Abbreviation = "UAL"
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>How many airlines are from USA?<CODESPLIT>SELECT count(*) FROM AIRLINES WHERE Country = "USA"
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Which city and country is the Alton airport at?<CODESPLIT>SELECT City , Country FROM AIRPORTS WHERE AirportName = "Alton"
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>What is the airport name for airport 'AKO'?<CODESPLIT>SELECT AirportName FROM AIRPORTS WHERE AirportCode = "AKO"
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>What are airport names at City 'Aberdeen'?<CODESPLIT>SELECT AirportName FROM AIRPORTS WHERE City = "Aberdeen"
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>How many flights depart from 'APG'?<CODESPLIT>SELECT count(*) FROM FLIGHTS WHERE SourceAirport = "APG"
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>How many flights have destination ATO?<CODESPLIT>SELECT count(*) FROM FLIGHTS WHERE DestAirport = "ATO"
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>How many flights depart from City Aberdeen?<CODESPLIT>SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = "Aberdeen"
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>How many flights arriving in Aberdeen city?<CODESPLIT>SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = "Aberdeen"
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?<CODESPLIT>SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport = T3.AirportCode WHERE T2.City = "Ashley" AND T3.City = "Aberdeen"
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>How many flights does airline 'JetBlue Airways' have?<CODESPLIT>SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline = T2.uid WHERE T2.Airline = "JetBlue Airways"
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>How many 'United Airlines' flights go to Airport 'ASY'?<CODESPLIT>SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline = T1.uid WHERE T1.Airline = "United Airlines" AND T2.DestAirport = "ASY"
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>How many 'United Airlines' flights depart from Airport 'AHD'?<CODESPLIT>SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline = T1.uid WHERE T1.Airline = "United Airlines" AND T2.SourceAirport = "AHD"
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>How many United Airlines flights go to City 'Aberdeen'?<CODESPLIT>SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid = T1.Airline WHERE T2.City = "Aberdeen" AND T3.Airline = "United Airlines"
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Which city has most number of arriving flights?<CODESPLIT>SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Which city has most number of departing flights?<CODESPLIT>SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>What is the code of airport that has the highest number of flights?<CODESPLIT>SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport OR T1.AirportCode = T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>What is the code of airport that has fewest number of flights?<CODESPLIT>SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport OR T1.AirportCode = T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Which airline has most number of flights?<CODESPLIT>SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Find the abbreviation and country of the airline that has fewest number of flights?<CODESPLIT>SELECT T1.Abbreviation , T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>What are airlines that have some flight departing from airport 'AHD'?<CODESPLIT>SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = "AHD"
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>What are airlines that have flights arriving at airport 'AHD'?<CODESPLIT>SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.DestAirport = "AHD"
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Find all airlines that have flights from both airports 'APG' and 'CVO'.<CODESPLIT>SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = "APG" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = "CVO"
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Find all airlines that have flights from airport 'CVO' but not from 'APG'.<CODESPLIT>SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = "CVO" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = "APG"
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Find all airlines that have at least 10 flights.<CODESPLIT>SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline HAVING count(*) > 10
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Find all airlines that have fewer than 200 flights.<CODESPLIT>SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline HAVING count(*) < 200
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>What are flight numbers of Airline "United Airlines"?<CODESPLIT>SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid = T1.Airline WHERE T2.Airline = "United Airlines"
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>What are flight numbers of flights departing from Airport "APG"?<CODESPLIT>SELECT FlightNo FROM FLIGHTS WHERE SourceAirport = "APG"
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>What are flight numbers of flights arriving at Airport "APG"?<CODESPLIT>SELECT FlightNo FROM FLIGHTS WHERE DestAirport = "APG"
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>What are flight numbers of flights departing from City "Aberdeen "?<CODESPLIT>SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = "Aberdeen"
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>What are flight numbers of flights arriving at City "Aberdeen"?<CODESPLIT>SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = "Aberdeen"
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Find the number of flights landing in the city of Aberdeen or Abilene.<CODESPLIT>SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.city = "Aberdeen" OR T2.city = "Abilene"
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Find the name of airports which do not have any flight in and out.<CODESPLIT>SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>How many employees are there?<CODESPLIT>SELECT count(*) FROM employee
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Sort employee names by their age in ascending order.<CODESPLIT>SELECT name FROM employee ORDER BY age
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>What is the number of employees from each city?<CODESPLIT>SELECT count(*) , city FROM employee GROUP BY city
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Which cities do more than one employee under age 30 come from?<CODESPLIT>SELECT city FROM employee WHERE age < 30 GROUP BY city HAVING count(*) > 1
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Find the number of shops in each location.<CODESPLIT>SELECT count(*) , LOCATION FROM shop GROUP BY LOCATION
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Find the manager name and district of the shop whose number of products is the largest.<CODESPLIT>SELECT manager_name , district FROM shop ORDER BY number_products DESC LIMIT 1
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>find the minimum and maximum number of products of all stores.<CODESPLIT>SELECT min(Number_products) , max(Number_products) FROM shop
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Return the name, location and district of all shops in descending order of number of products.<CODESPLIT>SELECT name , LOCATION , district FROM shop ORDER BY number_products DESC
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Find the names of stores whose number products is more than the average number of products.<CODESPLIT>SELECT name FROM shop WHERE number_products > (SELECT avg(number_products) FROM shop)
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>find the name of employee who was awarded the most times in the evaluation.<CODESPLIT>SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID = t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Find the name of the employee who got the highest one time bonus.<CODESPLIT>SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID = t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Find the names of employees who never won any award in the evaluation.<CODESPLIT>SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>What is the name of the shop that is hiring the largest number of employees?<CODESPLIT>SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id = t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Find the name of the shops that do not hire any employee.<CODESPLIT>SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Find the number of employees hired in each shop; show the shop name as well.<CODESPLIT>SELECT count(*) , t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id = t2.shop_id GROUP BY t2.name
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>What is total bonus given in all evaluations?<CODESPLIT>SELECT sum(bonus) FROM evaluation
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Give me all the information about hiring.<CODESPLIT>SELECT * FROM hiring
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Which district has both stores with less than 3000 products and stores with more than 10000 products?<CODESPLIT>SELECT district FROM shop WHERE Number_products < 3000 INTERSECT SELECT district FROM shop WHERE Number_products > 10000
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>How many different store locations are there?<CODESPLIT>SELECT count(DISTINCT LOCATION) FROM shop
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>How many documents do we have?<CODESPLIT>SELECT count(*) FROM Documents
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>List document IDs, document names, and document descriptions for all documents.<CODESPLIT>SELECT document_id , document_name , document_description FROM Documents
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>What is the document name and template id for document with description with the letter 'w' in it?<CODESPLIT>SELECT document_name , template_id FROM Documents WHERE Document_Description LIKE "%w%"
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>What is the document id, template id and description for document named "Robbin CV"?<CODESPLIT>SELECT document_id , template_id , Document_Description FROM Documents WHERE document_name = "Robbin CV"
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>How many different templates do all document use?<CODESPLIT>SELECT count(DISTINCT template_id) FROM Documents
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>How many documents are using the template with type code 'PPT'?<CODESPLIT>SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Template_Type_Code = 'PPT'
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Show all template ids and number of documents using each template.<CODESPLIT>SELECT template_id , count(*) FROM Documents GROUP BY template_id
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>What is the id and type code for the template used by the most documents?<CODESPLIT>SELECT T1.template_id , T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Show ids for all templates that are used by more than one document.<CODESPLIT>SELECT template_id FROM Documents GROUP BY template_id HAVING count(*) > 1
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Show ids for all templates not used by any document.<CODESPLIT>SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>How many templates do we have?<CODESPLIT>SELECT count(*) FROM Templates
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Show template ids, version numbers, and template type codes for all templates.<CODESPLIT>SELECT template_id , version_number , template_type_code FROM Templates
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Show all distinct template type codes for all templates.<CODESPLIT>SELECT DISTINCT template_type_code FROM Templates
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>What are the ids of templates with template type code PP or PPT?<CODESPLIT>SELECT template_id FROM Templates WHERE template_type_code = "PP" OR template_type_code = "PPT"
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>How many templates have template type code CV?<CODESPLIT>SELECT count(*) FROM Templates WHERE template_type_code = "CV"
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>What is the version number and template type code for the template with version number later than 5?<CODESPLIT>SELECT version_number , template_type_code FROM Templates WHERE version_number > 5
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Show all template type codes and number of templates for each.<CODESPLIT>SELECT template_type_code , count(*) FROM Templates GROUP BY template_type_code
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Which template type code has most number of templates?<CODESPLIT>SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Show all template type codes with less than three templates.<CODESPLIT>SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*) < 3
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>What the smallest version number and its template type code?<CODESPLIT>SELECT min(Version_Number) , template_type_code FROM Templates
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>What is the template type code of the template used by document with the name "Data base"?<CODESPLIT>SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id WHERE T2.document_name = "Data base"
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Show all document names using templates with template type code BK.<CODESPLIT>SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id WHERE T1.template_type_code = "BK"
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Show all template type codes and the number of documents using each type.<CODESPLIT>SELECT T1.template_type_code , count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Which template type code is used by most number of documents?<CODESPLIT>SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Show all template type codes that are not used by any document.<CODESPLIT>SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Show all template type codes and descriptions.<CODESPLIT>SELECT template_type_code , template_type_description FROM Ref_template_types
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>What is the template type descriptions for template type code "AD".<CODESPLIT>SELECT template_type_description FROM Ref_template_types WHERE template_type_code = "AD"
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>What is the template type code for template type description "Book".<CODESPLIT>SELECT template_type_code FROM Ref_template_types WHERE template_type_description = "Book"
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>What are the distinct template type descriptions for the templates ever used by any document?<CODESPLIT>SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID = T3.template_ID
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>What are the template ids with template type description "Presentation".<CODESPLIT>SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code = T2.template_type_code WHERE T1.template_type_description = "Presentation"
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>How many paragraphs in total?<CODESPLIT>SELECT count(*) FROM Paragraphs
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>How many paragraphs for the document with name 'Summer Show'?<CODESPLIT>SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID = T2.document_ID WHERE T2.document_name = 'Summer Show'
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Show paragraph details for paragraph with text 'Korea ' .<CODESPLIT>select other_details from paragraphs where paragraph_text like 'korea'
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Show all paragraph ids and texts for the document with name 'Welcome to NY'.<CODESPLIT>SELECT T1.paragraph_id , T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE T2.Document_Name = 'Welcome to NY'
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Show all paragraph texts for the document "Customer reviews".<CODESPLIT>SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE T2.document_name = "Customer reviews"
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Show all document ids and the number of paragraphs in each document. Order by document id.<CODESPLIT>SELECT document_id , count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Show all document ids, names and the number of paragraphs in each document.<CODESPLIT>SELECT T1.document_id , T2.document_name , count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>List all document ids with at least two paragraphs.<CODESPLIT>SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) >= 2
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>What is the document id and name with greatest number of paragraphs?<CODESPLIT>SELECT T1.document_id , T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>What is the document id with least number of paragraphs?<CODESPLIT>SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>What is the document id with 1 to 2 paragraphs?<CODESPLIT>SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Show the document id with paragraph text 'Brazil' and 'Ireland'.<CODESPLIT>SELECT document_id FROM Paragraphs WHERE paragraph_text = 'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text = 'Ireland'
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>How many teachers are there?<CODESPLIT>SELECT count(*) FROM teacher
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>List the names of teachers in ascending order of age.<CODESPLIT>SELECT Name FROM teacher ORDER BY Age ASC
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>What are the age and hometown of teachers?<CODESPLIT>SELECT Age , Hometown FROM teacher
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>List the name of teachers whose hometown is not `` Little Lever Urban District '' .<CODESPLIT>select name from teacher where hometown != "little lever urban district"
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Show the name of teachers aged either 32 or 33?<CODESPLIT>SELECT Name FROM teacher WHERE Age = 32 OR Age = 33
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>What is the hometown of the youngest teacher?<CODESPLIT>SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Show different hometown of teachers and the number of teachers from each hometown.<CODESPLIT>SELECT Hometown , COUNT(*) FROM teacher GROUP BY Hometown
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>List the most common hometown of teachers.<CODESPLIT>SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Show the hometowns shared by at least two teachers.<CODESPLIT>SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) >= 2
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Show names of teachers and the courses they are arranged to teach.<CODESPLIT>SELECT T3.Name , T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.<CODESPLIT>SELECT T3.Name , T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID ORDER BY T3.Name
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Show the name of the teacher for the math course.<CODESPLIT>SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID WHERE T2.Course = "Math"
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Show names of teachers and the number of courses they teach.<CODESPLIT>SELECT T2.Name , COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Show names of teachers that teach at least two courses.<CODESPLIT>SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*) >= 2
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>List the names of teachers who have not been arranged to teach courses.<CODESPLIT>SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>How many visitors below age 30 are there?<CODESPLIT>SELECT count(*) FROM visitor WHERE age < 30
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.<CODESPLIT>SELECT name FROM visitor WHERE Level_of_membership > 4 ORDER BY Level_of_membership DESC
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>What is the average age of the visitors whose membership level is not higher than 4?<CODESPLIT>SELECT avg(age) FROM visitor WHERE Level_of_membership <= 4
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.<CODESPLIT>SELECT name , Level_of_membership FROM visitor WHERE Level_of_membership > 4 ORDER BY age DESC
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Find the id and name of the museum that has the most staff members?<CODESPLIT>SELECT museum_id , name FROM museum ORDER BY num_of_staff DESC LIMIT 1
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Find the average number of staff working for the museums that were open before 2009.<CODESPLIT>SELECT avg(num_of_staff) FROM museum WHERE open_year < 2009
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>What are the opening year and staff number of the museum named Plaza Museum?<CODESPLIT>SELECT Num_of_Staff , Open_Year FROM museum WHERE name = 'Plaza Museum'
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>find the names of museums which have more staff than the minimum staff number of all museums opened after 2010.<CODESPLIT>SELECT name FROM museum WHERE num_of_staff > (SELECT min(num_of_staff) FROM museum WHERE open_year > 2010)
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>find the id, name and age for visitors who visited some museums more than once.<CODESPLIT>SELECT t1.id , t1.name , t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id GROUP BY t1.id HAVING count(*) > 1
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?<CODESPLIT>SELECT t2.visitor_id , t1.name , t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>What are the id and name of the museum visited most times?<CODESPLIT>SELECT t2.Museum_ID , t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID = t2.Museum_ID GROUP BY t2.Museum_ID ORDER BY count(*) DESC LIMIT 1
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>What is the name of the museum that had no visitor yet?<CODESPLIT>SELECT name FROM museum WHERE Museum_ID NOT IN (SELECT museum_id FROM visit)
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Find the name and age of the visitor who bought the most tickets at once.<CODESPLIT>SELECT t1.name , t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>What are the average and maximum number of tickets bought in all visits?<CODESPLIT>SELECT avg(num_of_ticket) , max(num_of_ticket) FROM visit
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>What is the total ticket expense of the visitors whose membership level is 1?<CODESPLIT>SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id WHERE t1.Level_of_membership = 1
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?<CODESPLIT>SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID = t2.Museum_ID WHERE t3.open_year < 2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID = t2.Museum_ID WHERE t3.open_year > 2011
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Find the number of visitors who did not visit any museum opened after 2010.<CODESPLIT>SELECT count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID = t2.Museum_ID WHERE t1.open_year > 2010)
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>How many museums were opened after 2013 or before 2008?<CODESPLIT>SELECT count(*) FROM museum WHERE open_year > 2013 OR open_year < 2008
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Find the total number of players.<CODESPLIT>SELECT count(*) FROM players
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Find the total number of matches.<CODESPLIT>SELECT count(*) FROM matches
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>List the first name and birth date of all players from the country with code USA.<CODESPLIT>SELECT first_name , birth_date FROM players WHERE country_code = 'USA'
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Find the average age of losers and winners of all matches.<CODESPLIT>SELECT avg(loser_age) , avg(winner_age) FROM matches
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Find the average rank of winners in all matches.<CODESPLIT>SELECT avg(winner_rank) FROM matches
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Find the highest rank of losers in all matches.<CODESPLIT>SELECT min(loser_rank) FROM matches
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>find the number of distinct country codes of all players.<CODESPLIT>SELECT count(DISTINCT country_code) FROM players
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Find the number of distinct name of losers.<CODESPLIT>SELECT count(DISTINCT loser_name) FROM matches
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Find the name of tourney that has more than 10 matches.<CODESPLIT>SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*) > 10
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>List the names of all winners who played in both 2013 and 2016.<CODESPLIT>SELECT winner_name FROM matches WHERE YEAR = 2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR = 2016
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>List the number of all matches who played in years of 2013 or 2016.<CODESPLIT>SELECT count(*) FROM matches WHERE YEAR = 2013 OR YEAR = 2016
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?<CODESPLIT>SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'WTA Championships' INTERSECT SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'Australian Open'
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>Find the first name and country code of the oldest player.<CODESPLIT>SELECT first_name , country_code FROM players ORDER BY birth_date LIMIT 1
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>List the first and last name of all players in the order of birth date.<CODESPLIT>SELECT first_name , last_name FROM players ORDER BY birth_date
1<CODESPLIT>URL<CODESPLIT>func_name<CODESPLIT>List the first and last name of all players who are left / L hand in the order of birth date.<CODESPLIT>SELECT first_name , last_name FROM players WHERE hand = 'L' ORDER BY birth_date